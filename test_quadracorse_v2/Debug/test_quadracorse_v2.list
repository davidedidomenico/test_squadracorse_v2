
test_quadracorse_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f68  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08004100  08004100  00014100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800418c  0800418c  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  0800418c  0800418c  0001418c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004194  08004194  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004194  08004194  00014194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004198  08004198  00014198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  0800419c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000028  080041c4  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  080041c4  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000feec  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023ff  00000000  00000000  0002ff87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd0  00000000  00000000  00032388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c4f  00000000  00000000  00033358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019cac  00000000  00000000  00033fa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000103bd  00000000  00000000  0004dc53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3a70  00000000  00000000  0005e010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000044fc  00000000  00000000  00101a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00105f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000028 	.word	0x20000028
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080040e8 	.word	0x080040e8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000002c 	.word	0x2000002c
 80001d4:	080040e8 	.word	0x080040e8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__gedf2>:
 8000550:	f04f 3cff 	mov.w	ip, #4294967295
 8000554:	e006      	b.n	8000564 <__cmpdf2+0x4>
 8000556:	bf00      	nop

08000558 <__ledf2>:
 8000558:	f04f 0c01 	mov.w	ip, #1
 800055c:	e002      	b.n	8000564 <__cmpdf2+0x4>
 800055e:	bf00      	nop

08000560 <__cmpdf2>:
 8000560:	f04f 0c01 	mov.w	ip, #1
 8000564:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000568:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800056c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000570:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000574:	bf18      	it	ne
 8000576:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800057a:	d01b      	beq.n	80005b4 <__cmpdf2+0x54>
 800057c:	b001      	add	sp, #4
 800057e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000582:	bf0c      	ite	eq
 8000584:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000588:	ea91 0f03 	teqne	r1, r3
 800058c:	bf02      	ittt	eq
 800058e:	ea90 0f02 	teqeq	r0, r2
 8000592:	2000      	moveq	r0, #0
 8000594:	4770      	bxeq	lr
 8000596:	f110 0f00 	cmn.w	r0, #0
 800059a:	ea91 0f03 	teq	r1, r3
 800059e:	bf58      	it	pl
 80005a0:	4299      	cmppl	r1, r3
 80005a2:	bf08      	it	eq
 80005a4:	4290      	cmpeq	r0, r2
 80005a6:	bf2c      	ite	cs
 80005a8:	17d8      	asrcs	r0, r3, #31
 80005aa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005ae:	f040 0001 	orr.w	r0, r0, #1
 80005b2:	4770      	bx	lr
 80005b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005bc:	d102      	bne.n	80005c4 <__cmpdf2+0x64>
 80005be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005c2:	d107      	bne.n	80005d4 <__cmpdf2+0x74>
 80005c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005cc:	d1d6      	bne.n	800057c <__cmpdf2+0x1c>
 80005ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005d2:	d0d3      	beq.n	800057c <__cmpdf2+0x1c>
 80005d4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__aeabi_cdrcmple>:
 80005dc:	4684      	mov	ip, r0
 80005de:	4610      	mov	r0, r2
 80005e0:	4662      	mov	r2, ip
 80005e2:	468c      	mov	ip, r1
 80005e4:	4619      	mov	r1, r3
 80005e6:	4663      	mov	r3, ip
 80005e8:	e000      	b.n	80005ec <__aeabi_cdcmpeq>
 80005ea:	bf00      	nop

080005ec <__aeabi_cdcmpeq>:
 80005ec:	b501      	push	{r0, lr}
 80005ee:	f7ff ffb7 	bl	8000560 <__cmpdf2>
 80005f2:	2800      	cmp	r0, #0
 80005f4:	bf48      	it	mi
 80005f6:	f110 0f00 	cmnmi.w	r0, #0
 80005fa:	bd01      	pop	{r0, pc}

080005fc <__aeabi_dcmpeq>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff fff4 	bl	80005ec <__aeabi_cdcmpeq>
 8000604:	bf0c      	ite	eq
 8000606:	2001      	moveq	r0, #1
 8000608:	2000      	movne	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_dcmplt>:
 8000610:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000614:	f7ff ffea 	bl	80005ec <__aeabi_cdcmpeq>
 8000618:	bf34      	ite	cc
 800061a:	2001      	movcc	r0, #1
 800061c:	2000      	movcs	r0, #0
 800061e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000622:	bf00      	nop

08000624 <__aeabi_dcmple>:
 8000624:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000628:	f7ff ffe0 	bl	80005ec <__aeabi_cdcmpeq>
 800062c:	bf94      	ite	ls
 800062e:	2001      	movls	r0, #1
 8000630:	2000      	movhi	r0, #0
 8000632:	f85d fb08 	ldr.w	pc, [sp], #8
 8000636:	bf00      	nop

08000638 <__aeabi_dcmpge>:
 8000638:	f84d ed08 	str.w	lr, [sp, #-8]!
 800063c:	f7ff ffce 	bl	80005dc <__aeabi_cdrcmple>
 8000640:	bf94      	ite	ls
 8000642:	2001      	movls	r0, #1
 8000644:	2000      	movhi	r0, #0
 8000646:	f85d fb08 	ldr.w	pc, [sp], #8
 800064a:	bf00      	nop

0800064c <__aeabi_dcmpgt>:
 800064c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000650:	f7ff ffc4 	bl	80005dc <__aeabi_cdrcmple>
 8000654:	bf34      	ite	cc
 8000656:	2001      	movcc	r0, #1
 8000658:	2000      	movcs	r0, #0
 800065a:	f85d fb08 	ldr.w	pc, [sp], #8
 800065e:	bf00      	nop

08000660 <__aeabi_uldivmod>:
 8000660:	b953      	cbnz	r3, 8000678 <__aeabi_uldivmod+0x18>
 8000662:	b94a      	cbnz	r2, 8000678 <__aeabi_uldivmod+0x18>
 8000664:	2900      	cmp	r1, #0
 8000666:	bf08      	it	eq
 8000668:	2800      	cmpeq	r0, #0
 800066a:	bf1c      	itt	ne
 800066c:	f04f 31ff 	movne.w	r1, #4294967295
 8000670:	f04f 30ff 	movne.w	r0, #4294967295
 8000674:	f000 b970 	b.w	8000958 <__aeabi_idiv0>
 8000678:	f1ad 0c08 	sub.w	ip, sp, #8
 800067c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000680:	f000 f806 	bl	8000690 <__udivmoddi4>
 8000684:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000688:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800068c:	b004      	add	sp, #16
 800068e:	4770      	bx	lr

08000690 <__udivmoddi4>:
 8000690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000694:	9e08      	ldr	r6, [sp, #32]
 8000696:	460d      	mov	r5, r1
 8000698:	4604      	mov	r4, r0
 800069a:	460f      	mov	r7, r1
 800069c:	2b00      	cmp	r3, #0
 800069e:	d14a      	bne.n	8000736 <__udivmoddi4+0xa6>
 80006a0:	428a      	cmp	r2, r1
 80006a2:	4694      	mov	ip, r2
 80006a4:	d965      	bls.n	8000772 <__udivmoddi4+0xe2>
 80006a6:	fab2 f382 	clz	r3, r2
 80006aa:	b143      	cbz	r3, 80006be <__udivmoddi4+0x2e>
 80006ac:	fa02 fc03 	lsl.w	ip, r2, r3
 80006b0:	f1c3 0220 	rsb	r2, r3, #32
 80006b4:	409f      	lsls	r7, r3
 80006b6:	fa20 f202 	lsr.w	r2, r0, r2
 80006ba:	4317      	orrs	r7, r2
 80006bc:	409c      	lsls	r4, r3
 80006be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80006c2:	fa1f f58c 	uxth.w	r5, ip
 80006c6:	fbb7 f1fe 	udiv	r1, r7, lr
 80006ca:	0c22      	lsrs	r2, r4, #16
 80006cc:	fb0e 7711 	mls	r7, lr, r1, r7
 80006d0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80006d4:	fb01 f005 	mul.w	r0, r1, r5
 80006d8:	4290      	cmp	r0, r2
 80006da:	d90a      	bls.n	80006f2 <__udivmoddi4+0x62>
 80006dc:	eb1c 0202 	adds.w	r2, ip, r2
 80006e0:	f101 37ff 	add.w	r7, r1, #4294967295
 80006e4:	f080 811c 	bcs.w	8000920 <__udivmoddi4+0x290>
 80006e8:	4290      	cmp	r0, r2
 80006ea:	f240 8119 	bls.w	8000920 <__udivmoddi4+0x290>
 80006ee:	3902      	subs	r1, #2
 80006f0:	4462      	add	r2, ip
 80006f2:	1a12      	subs	r2, r2, r0
 80006f4:	b2a4      	uxth	r4, r4
 80006f6:	fbb2 f0fe 	udiv	r0, r2, lr
 80006fa:	fb0e 2210 	mls	r2, lr, r0, r2
 80006fe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000702:	fb00 f505 	mul.w	r5, r0, r5
 8000706:	42a5      	cmp	r5, r4
 8000708:	d90a      	bls.n	8000720 <__udivmoddi4+0x90>
 800070a:	eb1c 0404 	adds.w	r4, ip, r4
 800070e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000712:	f080 8107 	bcs.w	8000924 <__udivmoddi4+0x294>
 8000716:	42a5      	cmp	r5, r4
 8000718:	f240 8104 	bls.w	8000924 <__udivmoddi4+0x294>
 800071c:	4464      	add	r4, ip
 800071e:	3802      	subs	r0, #2
 8000720:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000724:	1b64      	subs	r4, r4, r5
 8000726:	2100      	movs	r1, #0
 8000728:	b11e      	cbz	r6, 8000732 <__udivmoddi4+0xa2>
 800072a:	40dc      	lsrs	r4, r3
 800072c:	2300      	movs	r3, #0
 800072e:	e9c6 4300 	strd	r4, r3, [r6]
 8000732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000736:	428b      	cmp	r3, r1
 8000738:	d908      	bls.n	800074c <__udivmoddi4+0xbc>
 800073a:	2e00      	cmp	r6, #0
 800073c:	f000 80ed 	beq.w	800091a <__udivmoddi4+0x28a>
 8000740:	2100      	movs	r1, #0
 8000742:	e9c6 0500 	strd	r0, r5, [r6]
 8000746:	4608      	mov	r0, r1
 8000748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800074c:	fab3 f183 	clz	r1, r3
 8000750:	2900      	cmp	r1, #0
 8000752:	d149      	bne.n	80007e8 <__udivmoddi4+0x158>
 8000754:	42ab      	cmp	r3, r5
 8000756:	d302      	bcc.n	800075e <__udivmoddi4+0xce>
 8000758:	4282      	cmp	r2, r0
 800075a:	f200 80f8 	bhi.w	800094e <__udivmoddi4+0x2be>
 800075e:	1a84      	subs	r4, r0, r2
 8000760:	eb65 0203 	sbc.w	r2, r5, r3
 8000764:	2001      	movs	r0, #1
 8000766:	4617      	mov	r7, r2
 8000768:	2e00      	cmp	r6, #0
 800076a:	d0e2      	beq.n	8000732 <__udivmoddi4+0xa2>
 800076c:	e9c6 4700 	strd	r4, r7, [r6]
 8000770:	e7df      	b.n	8000732 <__udivmoddi4+0xa2>
 8000772:	b902      	cbnz	r2, 8000776 <__udivmoddi4+0xe6>
 8000774:	deff      	udf	#255	; 0xff
 8000776:	fab2 f382 	clz	r3, r2
 800077a:	2b00      	cmp	r3, #0
 800077c:	f040 8090 	bne.w	80008a0 <__udivmoddi4+0x210>
 8000780:	1a8a      	subs	r2, r1, r2
 8000782:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000786:	fa1f fe8c 	uxth.w	lr, ip
 800078a:	2101      	movs	r1, #1
 800078c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000790:	fb07 2015 	mls	r0, r7, r5, r2
 8000794:	0c22      	lsrs	r2, r4, #16
 8000796:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800079a:	fb0e f005 	mul.w	r0, lr, r5
 800079e:	4290      	cmp	r0, r2
 80007a0:	d908      	bls.n	80007b4 <__udivmoddi4+0x124>
 80007a2:	eb1c 0202 	adds.w	r2, ip, r2
 80007a6:	f105 38ff 	add.w	r8, r5, #4294967295
 80007aa:	d202      	bcs.n	80007b2 <__udivmoddi4+0x122>
 80007ac:	4290      	cmp	r0, r2
 80007ae:	f200 80cb 	bhi.w	8000948 <__udivmoddi4+0x2b8>
 80007b2:	4645      	mov	r5, r8
 80007b4:	1a12      	subs	r2, r2, r0
 80007b6:	b2a4      	uxth	r4, r4
 80007b8:	fbb2 f0f7 	udiv	r0, r2, r7
 80007bc:	fb07 2210 	mls	r2, r7, r0, r2
 80007c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007c4:	fb0e fe00 	mul.w	lr, lr, r0
 80007c8:	45a6      	cmp	lr, r4
 80007ca:	d908      	bls.n	80007de <__udivmoddi4+0x14e>
 80007cc:	eb1c 0404 	adds.w	r4, ip, r4
 80007d0:	f100 32ff 	add.w	r2, r0, #4294967295
 80007d4:	d202      	bcs.n	80007dc <__udivmoddi4+0x14c>
 80007d6:	45a6      	cmp	lr, r4
 80007d8:	f200 80bb 	bhi.w	8000952 <__udivmoddi4+0x2c2>
 80007dc:	4610      	mov	r0, r2
 80007de:	eba4 040e 	sub.w	r4, r4, lr
 80007e2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80007e6:	e79f      	b.n	8000728 <__udivmoddi4+0x98>
 80007e8:	f1c1 0720 	rsb	r7, r1, #32
 80007ec:	408b      	lsls	r3, r1
 80007ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80007f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007f6:	fa05 f401 	lsl.w	r4, r5, r1
 80007fa:	fa20 f307 	lsr.w	r3, r0, r7
 80007fe:	40fd      	lsrs	r5, r7
 8000800:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000804:	4323      	orrs	r3, r4
 8000806:	fbb5 f8f9 	udiv	r8, r5, r9
 800080a:	fa1f fe8c 	uxth.w	lr, ip
 800080e:	fb09 5518 	mls	r5, r9, r8, r5
 8000812:	0c1c      	lsrs	r4, r3, #16
 8000814:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000818:	fb08 f50e 	mul.w	r5, r8, lr
 800081c:	42a5      	cmp	r5, r4
 800081e:	fa02 f201 	lsl.w	r2, r2, r1
 8000822:	fa00 f001 	lsl.w	r0, r0, r1
 8000826:	d90b      	bls.n	8000840 <__udivmoddi4+0x1b0>
 8000828:	eb1c 0404 	adds.w	r4, ip, r4
 800082c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000830:	f080 8088 	bcs.w	8000944 <__udivmoddi4+0x2b4>
 8000834:	42a5      	cmp	r5, r4
 8000836:	f240 8085 	bls.w	8000944 <__udivmoddi4+0x2b4>
 800083a:	f1a8 0802 	sub.w	r8, r8, #2
 800083e:	4464      	add	r4, ip
 8000840:	1b64      	subs	r4, r4, r5
 8000842:	b29d      	uxth	r5, r3
 8000844:	fbb4 f3f9 	udiv	r3, r4, r9
 8000848:	fb09 4413 	mls	r4, r9, r3, r4
 800084c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000850:	fb03 fe0e 	mul.w	lr, r3, lr
 8000854:	45a6      	cmp	lr, r4
 8000856:	d908      	bls.n	800086a <__udivmoddi4+0x1da>
 8000858:	eb1c 0404 	adds.w	r4, ip, r4
 800085c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000860:	d26c      	bcs.n	800093c <__udivmoddi4+0x2ac>
 8000862:	45a6      	cmp	lr, r4
 8000864:	d96a      	bls.n	800093c <__udivmoddi4+0x2ac>
 8000866:	3b02      	subs	r3, #2
 8000868:	4464      	add	r4, ip
 800086a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800086e:	fba3 9502 	umull	r9, r5, r3, r2
 8000872:	eba4 040e 	sub.w	r4, r4, lr
 8000876:	42ac      	cmp	r4, r5
 8000878:	46c8      	mov	r8, r9
 800087a:	46ae      	mov	lr, r5
 800087c:	d356      	bcc.n	800092c <__udivmoddi4+0x29c>
 800087e:	d053      	beq.n	8000928 <__udivmoddi4+0x298>
 8000880:	b156      	cbz	r6, 8000898 <__udivmoddi4+0x208>
 8000882:	ebb0 0208 	subs.w	r2, r0, r8
 8000886:	eb64 040e 	sbc.w	r4, r4, lr
 800088a:	fa04 f707 	lsl.w	r7, r4, r7
 800088e:	40ca      	lsrs	r2, r1
 8000890:	40cc      	lsrs	r4, r1
 8000892:	4317      	orrs	r7, r2
 8000894:	e9c6 7400 	strd	r7, r4, [r6]
 8000898:	4618      	mov	r0, r3
 800089a:	2100      	movs	r1, #0
 800089c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a0:	f1c3 0120 	rsb	r1, r3, #32
 80008a4:	fa02 fc03 	lsl.w	ip, r2, r3
 80008a8:	fa20 f201 	lsr.w	r2, r0, r1
 80008ac:	fa25 f101 	lsr.w	r1, r5, r1
 80008b0:	409d      	lsls	r5, r3
 80008b2:	432a      	orrs	r2, r5
 80008b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008b8:	fa1f fe8c 	uxth.w	lr, ip
 80008bc:	fbb1 f0f7 	udiv	r0, r1, r7
 80008c0:	fb07 1510 	mls	r5, r7, r0, r1
 80008c4:	0c11      	lsrs	r1, r2, #16
 80008c6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80008ca:	fb00 f50e 	mul.w	r5, r0, lr
 80008ce:	428d      	cmp	r5, r1
 80008d0:	fa04 f403 	lsl.w	r4, r4, r3
 80008d4:	d908      	bls.n	80008e8 <__udivmoddi4+0x258>
 80008d6:	eb1c 0101 	adds.w	r1, ip, r1
 80008da:	f100 38ff 	add.w	r8, r0, #4294967295
 80008de:	d22f      	bcs.n	8000940 <__udivmoddi4+0x2b0>
 80008e0:	428d      	cmp	r5, r1
 80008e2:	d92d      	bls.n	8000940 <__udivmoddi4+0x2b0>
 80008e4:	3802      	subs	r0, #2
 80008e6:	4461      	add	r1, ip
 80008e8:	1b49      	subs	r1, r1, r5
 80008ea:	b292      	uxth	r2, r2
 80008ec:	fbb1 f5f7 	udiv	r5, r1, r7
 80008f0:	fb07 1115 	mls	r1, r7, r5, r1
 80008f4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008f8:	fb05 f10e 	mul.w	r1, r5, lr
 80008fc:	4291      	cmp	r1, r2
 80008fe:	d908      	bls.n	8000912 <__udivmoddi4+0x282>
 8000900:	eb1c 0202 	adds.w	r2, ip, r2
 8000904:	f105 38ff 	add.w	r8, r5, #4294967295
 8000908:	d216      	bcs.n	8000938 <__udivmoddi4+0x2a8>
 800090a:	4291      	cmp	r1, r2
 800090c:	d914      	bls.n	8000938 <__udivmoddi4+0x2a8>
 800090e:	3d02      	subs	r5, #2
 8000910:	4462      	add	r2, ip
 8000912:	1a52      	subs	r2, r2, r1
 8000914:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000918:	e738      	b.n	800078c <__udivmoddi4+0xfc>
 800091a:	4631      	mov	r1, r6
 800091c:	4630      	mov	r0, r6
 800091e:	e708      	b.n	8000732 <__udivmoddi4+0xa2>
 8000920:	4639      	mov	r1, r7
 8000922:	e6e6      	b.n	80006f2 <__udivmoddi4+0x62>
 8000924:	4610      	mov	r0, r2
 8000926:	e6fb      	b.n	8000720 <__udivmoddi4+0x90>
 8000928:	4548      	cmp	r0, r9
 800092a:	d2a9      	bcs.n	8000880 <__udivmoddi4+0x1f0>
 800092c:	ebb9 0802 	subs.w	r8, r9, r2
 8000930:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000934:	3b01      	subs	r3, #1
 8000936:	e7a3      	b.n	8000880 <__udivmoddi4+0x1f0>
 8000938:	4645      	mov	r5, r8
 800093a:	e7ea      	b.n	8000912 <__udivmoddi4+0x282>
 800093c:	462b      	mov	r3, r5
 800093e:	e794      	b.n	800086a <__udivmoddi4+0x1da>
 8000940:	4640      	mov	r0, r8
 8000942:	e7d1      	b.n	80008e8 <__udivmoddi4+0x258>
 8000944:	46d0      	mov	r8, sl
 8000946:	e77b      	b.n	8000840 <__udivmoddi4+0x1b0>
 8000948:	3d02      	subs	r5, #2
 800094a:	4462      	add	r2, ip
 800094c:	e732      	b.n	80007b4 <__udivmoddi4+0x124>
 800094e:	4608      	mov	r0, r1
 8000950:	e70a      	b.n	8000768 <__udivmoddi4+0xd8>
 8000952:	4464      	add	r4, ip
 8000954:	3802      	subs	r0, #2
 8000956:	e742      	b.n	80007de <__udivmoddi4+0x14e>

08000958 <__aeabi_idiv0>:
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop

0800095c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000960:	4b04      	ldr	r3, [pc, #16]	; (8000974 <__NVIC_GetPriorityGrouping+0x18>)
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	0a1b      	lsrs	r3, r3, #8
 8000966:	f003 0307 	and.w	r3, r3, #7
}
 800096a:	4618      	mov	r0, r3
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000986:	2b00      	cmp	r3, #0
 8000988:	db0b      	blt.n	80009a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	f003 021f 	and.w	r2, r3, #31
 8000990:	4907      	ldr	r1, [pc, #28]	; (80009b0 <__NVIC_EnableIRQ+0x38>)
 8000992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000996:	095b      	lsrs	r3, r3, #5
 8000998:	2001      	movs	r0, #1
 800099a:	fa00 f202 	lsl.w	r2, r0, r2
 800099e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000e100 	.word	0xe000e100

080009b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	6039      	str	r1, [r7, #0]
 80009be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	db0a      	blt.n	80009de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	490c      	ldr	r1, [pc, #48]	; (8000a00 <__NVIC_SetPriority+0x4c>)
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	0112      	lsls	r2, r2, #4
 80009d4:	b2d2      	uxtb	r2, r2
 80009d6:	440b      	add	r3, r1
 80009d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009dc:	e00a      	b.n	80009f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	4908      	ldr	r1, [pc, #32]	; (8000a04 <__NVIC_SetPriority+0x50>)
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	f003 030f 	and.w	r3, r3, #15
 80009ea:	3b04      	subs	r3, #4
 80009ec:	0112      	lsls	r2, r2, #4
 80009ee:	b2d2      	uxtb	r2, r2
 80009f0:	440b      	add	r3, r1
 80009f2:	761a      	strb	r2, [r3, #24]
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	e000e100 	.word	0xe000e100
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b089      	sub	sp, #36	; 0x24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	f1c3 0307 	rsb	r3, r3, #7
 8000a22:	2b04      	cmp	r3, #4
 8000a24:	bf28      	it	cs
 8000a26:	2304      	movcs	r3, #4
 8000a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	3304      	adds	r3, #4
 8000a2e:	2b06      	cmp	r3, #6
 8000a30:	d902      	bls.n	8000a38 <NVIC_EncodePriority+0x30>
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	3b03      	subs	r3, #3
 8000a36:	e000      	b.n	8000a3a <NVIC_EncodePriority+0x32>
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	43da      	mvns	r2, r3
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	401a      	ands	r2, r3
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a50:	f04f 31ff 	mov.w	r1, #4294967295
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5a:	43d9      	mvns	r1, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a60:	4313      	orrs	r3, r2
         );
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3724      	adds	r7, #36	; 0x24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b089      	sub	sp, #36	; 0x24
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	60f8      	str	r0, [r7, #12]
 8000a76:	60b9      	str	r1, [r7, #8]
 8000a78:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	332c      	adds	r3, #44	; 0x2c
 8000a7e:	4619      	mov	r1, r3
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000a86:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a8a:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	fa92 f2a2 	rbit	r2, r2
 8000a92:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000a94:	697a      	ldr	r2, [r7, #20]
 8000a96:	fab2 f282 	clz	r2, r2
 8000a9a:	b2d2      	uxtb	r2, r2
 8000a9c:	40d3      	lsrs	r3, r2
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	440b      	add	r3, r1
 8000aa2:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	f003 031f 	and.w	r3, r3, #31
 8000aae:	211f      	movs	r1, #31
 8000ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f003 011f 	and.w	r1, r3, #31
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	f003 031f 	and.w	r3, r3, #31
 8000ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac8:	431a      	orrs	r2, r3
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000ace:	bf00      	nop
 8000ad0:	3724      	adds	r7, #36	; 0x24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b083      	sub	sp, #12
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
 8000ae2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	431a      	orrs	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	609a      	str	r2, [r3, #8]
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b08d      	sub	sp, #52	; 0x34
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	330c      	adds	r3, #12
 8000b10:	4619      	mov	r1, r3
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000b1c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b1e:	69ba      	ldr	r2, [r7, #24]
 8000b20:	fa92 f2a2 	rbit	r2, r2
 8000b24:	617a      	str	r2, [r7, #20]
  return result;
 8000b26:	697a      	ldr	r2, [r7, #20]
 8000b28:	fab2 f282 	clz	r2, r2
 8000b2c:	b2d2      	uxtb	r2, r2
 8000b2e:	40d3      	lsrs	r3, r2
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	440b      	add	r3, r1
 8000b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 8000b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000b40:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8000b44:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b46:	6a39      	ldr	r1, [r7, #32]
 8000b48:	fa91 f1a1 	rbit	r1, r1
 8000b4c:	61f9      	str	r1, [r7, #28]
  return result;
 8000b4e:	69f9      	ldr	r1, [r7, #28]
 8000b50:	fab1 f181 	clz	r1, r1
 8000b54:	b2c9      	uxtb	r1, r1
 8000b56:	40cb      	lsrs	r3, r1
 8000b58:	2107      	movs	r1, #7
 8000b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	401a      	ands	r2, r3
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000b68:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8000b6c:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000b70:	fa91 f1a1 	rbit	r1, r1
 8000b74:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8000b76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000b78:	fab1 f181 	clz	r1, r1
 8000b7c:	b2c9      	uxtb	r1, r1
 8000b7e:	40cb      	lsrs	r3, r1
 8000b80:	6879      	ldr	r1, [r7, #4]
 8000b82:	fa01 f303 	lsl.w	r3, r1, r3
 8000b86:	431a      	orrs	r2, r3
 8000b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b8a:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8000b8c:	bf00      	nop
 8000b8e:	3734      	adds	r7, #52	; 0x34
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <LL_ADC_EnableIT_EOCS>:
  * @rmtoll CR1      EOCIE          LL_ADC_EnableIT_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_EOCS(ADC_TypeDef *ADCx)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f043 0220 	orr.w	r2, r3, #32
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	605a      	str	r2, [r3, #4]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <LL_RCC_HSI_Enable+0x1c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <LL_RCC_HSI_Enable+0x1c>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	6013      	str	r3, [r2, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <LL_RCC_HSI_IsReady+0x20>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f003 0302 	and.w	r3, r3, #2
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	bf0c      	ite	eq
 8000be8:	2301      	moveq	r3, #1
 8000bea:	2300      	movne	r3, #0
 8000bec:	b2db      	uxtb	r3, r3
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	40023800 	.word	0x40023800

08000bfc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	4904      	ldr	r1, [pc, #16]	; (8000c24 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000c12:	4313      	orrs	r3, r2
 8000c14:	600b      	str	r3, [r1, #0]
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800

08000c28 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <LL_RCC_SetSysClkSource+0x24>)
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	f023 0203 	bic.w	r2, r3, #3
 8000c38:	4904      	ldr	r1, [pc, #16]	; (8000c4c <LL_RCC_SetSysClkSource+0x24>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	608b      	str	r3, [r1, #8]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	40023800 	.word	0x40023800

08000c50 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000c54:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <LL_RCC_GetSysClkSource+0x18>)
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	f003 030c 	and.w	r3, r3, #12
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40023800 	.word	0x40023800

08000c6c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <LL_RCC_SetAHBPrescaler+0x24>)
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c7c:	4904      	ldr	r1, [pc, #16]	; (8000c90 <LL_RCC_SetAHBPrescaler+0x24>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	608b      	str	r3, [r1, #8]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	40023800 	.word	0x40023800

08000c94 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000ca4:	4904      	ldr	r1, [pc, #16]	; (8000cb8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	608b      	str	r3, [r1, #8]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	40023800 	.word	0x40023800

08000cbc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000ccc:	4904      	ldr	r1, [pc, #16]	; (8000ce0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	608b      	str	r3, [r1, #8]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	40023800 	.word	0x40023800

08000ce4 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000cec:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <LL_RCC_SetTIMPrescaler+0x28>)
 8000cee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cf2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000cf6:	4905      	ldr	r1, [pc, #20]	; (8000d0c <LL_RCC_SetTIMPrescaler+0x28>)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	40023800 	.word	0x40023800

08000d10 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <LL_RCC_PLL_Enable+0x1c>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <LL_RCC_PLL_Enable+0x1c>)
 8000d1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d1e:	6013      	str	r3, [r2, #0]
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800

08000d30 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000d34:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <LL_RCC_PLL_IsReady+0x24>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000d40:	bf0c      	ite	eq
 8000d42:	2301      	moveq	r3, #1
 8000d44:	2300      	movne	r3, #0
 8000d46:	b2db      	uxtb	r3, r3
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800

08000d58 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
 8000d64:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000d66:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000d68:	685a      	ldr	r2, [r3, #4]
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	68f9      	ldr	r1, [r7, #12]
 8000d70:	68ba      	ldr	r2, [r7, #8]
 8000d72:	4311      	orrs	r1, r2
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	0192      	lsls	r2, r2, #6
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	4908      	ldr	r1, [pc, #32]	; (8000d9c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000d88:	4904      	ldr	r1, [pc, #16]	; (8000d9c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	ffbf8000 	.word	0xffbf8000

08000da4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000dae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000db0:	4907      	ldr	r1, [pc, #28]	; (8000dd0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000dba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
}
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	40023800 	.word	0x40023800

08000dd4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000de0:	4907      	ldr	r1, [pc, #28]	; (8000e00 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4013      	ands	r3, r2
 8000df0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000df2:	68fb      	ldr	r3, [r7, #12]
}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	40023800 	.word	0x40023800

08000e04 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e10:	4907      	ldr	r1, [pc, #28]	; (8000e30 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e22:	68fb      	ldr	r3, [r7, #12]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	40023800 	.word	0x40023800

08000e34 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <LL_FLASH_SetLatency+0x24>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f023 0207 	bic.w	r2, r3, #7
 8000e44:	4904      	ldr	r1, [pc, #16]	; (8000e58 <LL_FLASH_SetLatency+0x24>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	600b      	str	r3, [r1, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	40023c00 	.word	0x40023c00

08000e5c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <LL_FLASH_GetLatency+0x18>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 0307 	and.w	r3, r3, #7
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	40023c00 	.word	0x40023c00

08000e78 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000e88:	4904      	ldr	r1, [pc, #16]	; (8000e9c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	600b      	str	r3, [r1, #0]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	40007000 	.word	0x40007000

08000ea0 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8000ea4:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000eb0:	bf0c      	ite	eq
 8000eb2:	2301      	moveq	r3, #1
 8000eb4:	2300      	movne	r3, #0
 8000eb6:	b2db      	uxtb	r3, r3
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40007000 	.word	0x40007000

08000ec8 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	601a      	str	r2, [r3, #0]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d01c      	beq.n	8000f32 <LL_TIM_OC_DisableFast+0x4a>
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	d017      	beq.n	8000f2e <LL_TIM_OC_DisableFast+0x46>
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	2b10      	cmp	r3, #16
 8000f02:	d012      	beq.n	8000f2a <LL_TIM_OC_DisableFast+0x42>
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	2b40      	cmp	r3, #64	; 0x40
 8000f08:	d00d      	beq.n	8000f26 <LL_TIM_OC_DisableFast+0x3e>
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f10:	d007      	beq.n	8000f22 <LL_TIM_OC_DisableFast+0x3a>
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f18:	d101      	bne.n	8000f1e <LL_TIM_OC_DisableFast+0x36>
 8000f1a:	2305      	movs	r3, #5
 8000f1c:	e00a      	b.n	8000f34 <LL_TIM_OC_DisableFast+0x4c>
 8000f1e:	2306      	movs	r3, #6
 8000f20:	e008      	b.n	8000f34 <LL_TIM_OC_DisableFast+0x4c>
 8000f22:	2304      	movs	r3, #4
 8000f24:	e006      	b.n	8000f34 <LL_TIM_OC_DisableFast+0x4c>
 8000f26:	2303      	movs	r3, #3
 8000f28:	e004      	b.n	8000f34 <LL_TIM_OC_DisableFast+0x4c>
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	e002      	b.n	8000f34 <LL_TIM_OC_DisableFast+0x4c>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e000      	b.n	8000f34 <LL_TIM_OC_DisableFast+0x4c>
 8000f32:	2300      	movs	r3, #0
 8000f34:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3318      	adds	r3, #24
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
 8000f3e:	4a0b      	ldr	r2, [pc, #44]	; (8000f6c <LL_TIM_OC_DisableFast+0x84>)
 8000f40:	5cd3      	ldrb	r3, [r2, r3]
 8000f42:	440b      	add	r3, r1
 8000f44:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	4908      	ldr	r1, [pc, #32]	; (8000f70 <LL_TIM_OC_DisableFast+0x88>)
 8000f4e:	5ccb      	ldrb	r3, [r1, r3]
 8000f50:	4619      	mov	r1, r3
 8000f52:	2304      	movs	r3, #4
 8000f54:	408b      	lsls	r3, r1
 8000f56:	43db      	mvns	r3, r3
 8000f58:	401a      	ands	r2, r3
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	601a      	str	r2, [r3, #0]

}
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	08004174 	.word	0x08004174
 8000f70:	0800417c 	.word	0x0800417c

08000f74 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	605a      	str	r2, [r3, #4]
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	609a      	str	r2, [r3, #8]
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
 8000fc2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	041a      	lsls	r2, r3, #16
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	619a      	str	r2, [r3, #24]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 	{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]

 	if(htim == &htim4){
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a13      	ldr	r2, [pc, #76]	; (8001030 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d11c      	bne.n	8001022 <HAL_TIM_IC_CaptureCallback+0x4a>
 		if (prima_pressione == 0){ // se è prima pressione
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d112      	bne.n	8001016 <HAL_TIM_IC_CaptureCallback+0x3e>
 			prima_pressione = 1;   // setto flag pressione
 8000ff0:	4b10      	ldr	r3, [pc, #64]	; (8001034 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	601a      	str	r2, [r3, #0]
 			stato_corrente = waiting_state;	// imposto stato di wait
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <HAL_TIM_IC_CaptureCallback+0x60>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	701a      	strb	r2, [r3, #0]
 			LL_GPIO_WriteReg(GPIOC, ODR, LL_GPIO_ReadReg(GPIOA, ODR) & ~0b100000); // spengo GPIO PC5 collegato al led rosso sulla breadboard
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <HAL_TIM_IC_CaptureCallback+0x64>)
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	4a0f      	ldr	r2, [pc, #60]	; (8001040 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001002:	f023 0320 	bic.w	r3, r3, #32
 8001006:	6153      	str	r3, [r2, #20]
 			LL_GPIO_WriteReg(GPIOA, ODR, LL_GPIO_ReadReg(GPIOA, ODR) & ~0b100000); // spengo GPIO PA5 collegato al led verde sulla board
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <HAL_TIM_IC_CaptureCallback+0x64>)
 800100a:	695b      	ldr	r3, [r3, #20]
 800100c:	4a0b      	ldr	r2, [pc, #44]	; (800103c <HAL_TIM_IC_CaptureCallback+0x64>)
 800100e:	f023 0320 	bic.w	r3, r3, #32
 8001012:	6153      	str	r3, [r2, #20]
 		else { // se è seconda pressione
 			prima_pressione = 0; // resetto flag pressione
 			stato_corrente = running_state; // imposto stato run
 	}
 	}
 	}
 8001014:	e005      	b.n	8001022 <HAL_TIM_IC_CaptureCallback+0x4a>
 			prima_pressione = 0; // resetto flag pressione
 8001016:	4b07      	ldr	r3, [pc, #28]	; (8001034 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 			stato_corrente = running_state; // imposto stato run
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_TIM_IC_CaptureCallback+0x60>)
 800101e:	2202      	movs	r2, #2
 8001020:	701a      	strb	r2, [r3, #0]
 	}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	20000044 	.word	0x20000044
 8001034:	200000d0 	.word	0x200000d0
 8001038:	20000000 	.word	0x20000000
 800103c:	40020000 	.word	0x40020000
 8001040:	40020800 	.word	0x40020800

08001044 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001048:	f000 fdae 	bl	8001ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104c:	f000 f886 	bl	800115c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001050:	f000 fa62 	bl	8001518 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001054:	f000 f8d8 	bl	8001208 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001058:	f000 f956 	bl	8001308 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800105c:	f000 fa32 	bl	80014c4 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001060:	f000 f9c0 	bl	80013e4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  __HAL_UART_ENABLE(&huart2); // abilita uart2
 8001064:	4b33      	ldr	r3, [pc, #204]	; (8001134 <main+0xf0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	68da      	ldr	r2, [r3, #12]
 800106a:	4b32      	ldr	r3, [pc, #200]	; (8001134 <main+0xf0>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001072:	60da      	str	r2, [r3, #12]
  LL_ADC_EnableIT_EOCS(ADC1); // abilita interrupt dell adc
 8001074:	4830      	ldr	r0, [pc, #192]	; (8001138 <main+0xf4>)
 8001076:	f7ff fd8f 	bl	8000b98 <LL_ADC_EnableIT_EOCS>

  __HAL_UART_ENABLE(&huart2);  // enable dell uart
 800107a:	4b2e      	ldr	r3, [pc, #184]	; (8001134 <main+0xf0>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	68da      	ldr	r2, [r3, #12]
 8001080:	4b2c      	ldr	r3, [pc, #176]	; (8001134 <main+0xf0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001088:	60da      	str	r2, [r3, #12]
  LL_TIM_WriteReg(TIM3, CCR1, LL_TIM_ReadReg(TIM3,CCR1) | soglia_500ms); // impostazione soglia ch1
 800108a:	4b2c      	ldr	r3, [pc, #176]	; (800113c <main+0xf8>)
 800108c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800108e:	4b2c      	ldr	r3, [pc, #176]	; (8001140 <main+0xfc>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	492a      	ldr	r1, [pc, #168]	; (800113c <main+0xf8>)
 8001094:	4313      	orrs	r3, r2
 8001096:	634b      	str	r3, [r1, #52]	; 0x34
  LL_TIM_WriteReg(TIM3, CCR2, LL_TIM_ReadReg(TIM3,CCR2) | soglia_350ms); // impostazione soglia ch2
 8001098:	4b28      	ldr	r3, [pc, #160]	; (800113c <main+0xf8>)
 800109a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800109c:	4b29      	ldr	r3, [pc, #164]	; (8001144 <main+0x100>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4926      	ldr	r1, [pc, #152]	; (800113c <main+0xf8>)
 80010a2:	4313      	orrs	r3, r2
 80010a4:	638b      	str	r3, [r1, #56]	; 0x38
  LL_TIM_WriteReg(TIM3, CCR3, LL_TIM_ReadReg(TIM3,CCR3) | soglia_200ms); // impostazione soglia ch3
 80010a6:	4b25      	ldr	r3, [pc, #148]	; (800113c <main+0xf8>)
 80010a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010aa:	4b27      	ldr	r3, [pc, #156]	; (8001148 <main+0x104>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4923      	ldr	r1, [pc, #140]	; (800113c <main+0xf8>)
 80010b0:	4313      	orrs	r3, r2
 80010b2:	63cb      	str	r3, [r1, #60]	; 0x3c


  LL_TIM_WriteReg(TIM3, CCMR1, (LL_TIM_ReadReg(TIM3,CCMR1) & ~0x808)); // disabilitazione registri shadow per ch1 e ch2
 80010b4:	4b21      	ldr	r3, [pc, #132]	; (800113c <main+0xf8>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a20      	ldr	r2, [pc, #128]	; (800113c <main+0xf8>)
 80010ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010be:	f023 0308 	bic.w	r3, r3, #8
 80010c2:	6193      	str	r3, [r2, #24]
  LL_TIM_WriteReg(TIM3, CCMR2, (LL_TIM_ReadReg(TIM3,CCMR2) & ~0b1000)); // disabilitazione registri shadow
 80010c4:	4b1d      	ldr	r3, [pc, #116]	; (800113c <main+0xf8>)
 80010c6:	69db      	ldr	r3, [r3, #28]
 80010c8:	4a1c      	ldr	r2, [pc, #112]	; (800113c <main+0xf8>)
 80010ca:	f023 0308 	bic.w	r3, r3, #8
 80010ce:	61d3      	str	r3, [r2, #28]

  ADC->CCR |= 1 <<23; // abilito sensore di temperatura https://controllerstech.com/dma-with-adc-using-registers-in-stm32/
 80010d0:	4b1e      	ldr	r3, [pc, #120]	; (800114c <main+0x108>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	4a1d      	ldr	r2, [pc, #116]	; (800114c <main+0x108>)
 80010d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010da:	6053      	str	r3, [r2, #4]

  LL_TIM_WriteReg(TIM3, DIER,(LL_TIM_ReadReg(TIM3,DIER) | 0b11110));   // enable interrupt tim3
 80010dc:	4b17      	ldr	r3, [pc, #92]	; (800113c <main+0xf8>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	4a16      	ldr	r2, [pc, #88]	; (800113c <main+0xf8>)
 80010e2:	f043 031e 	orr.w	r3, r3, #30
 80010e6:	60d3      	str	r3, [r2, #12]

  __HAL_DBGMCU_FREEZE_TIM3(); // ferma tim3 durante stop del debugger
 80010e8:	4b19      	ldr	r3, [pc, #100]	; (8001150 <main+0x10c>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	4a18      	ldr	r2, [pc, #96]	; (8001150 <main+0x10c>)
 80010ee:	f043 0302 	orr.w	r3, r3, #2
 80010f2:	6093      	str	r3, [r2, #8]
  LL_TIM_WriteReg(TIM3, CR1,( LL_TIM_ReadReg(TIM3, CR1) | 0x0001));  // start counter
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <main+0xf8>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a10      	ldr	r2, [pc, #64]	; (800113c <main+0xf8>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	6013      	str	r3, [r2, #0]
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4); // setta timer in input capture
 8001100:	210c      	movs	r1, #12
 8001102:	4814      	ldr	r0, [pc, #80]	; (8001154 <main+0x110>)
 8001104:	f001 f928 	bl	8002358 <HAL_TIM_IC_Start_IT>


  LL_ADC_WriteReg(ADC1, CR2,LL_ADC_ReadReg(ADC1, CR2) | 0b01); //enable adc
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <main+0xf4>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <main+0xf4>)
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	6093      	str	r3, [r2, #8]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(stato_corrente){
 8001114:	4b10      	ldr	r3, [pc, #64]	; (8001158 <main+0x114>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b02      	cmp	r3, #2
 800111c:	d005      	beq.n	800112a <main+0xe6>
 800111e:	2b02      	cmp	r3, #2
 8001120:	dcf8      	bgt.n	8001114 <main+0xd0>
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <main+0xea>
 8001126:	2b01      	cmp	r3, #1
		  		  break;

		  	  case waiting_state:


		  		  break;
 8001128:	e002      	b.n	8001130 <main+0xec>
		  		  break;
 800112a:	bf00      	nop
 800112c:	e7f2      	b.n	8001114 <main+0xd0>
		  		  break;
 800112e:	bf00      	nop
	  switch(stato_corrente){
 8001130:	e7f0      	b.n	8001114 <main+0xd0>
 8001132:	bf00      	nop
 8001134:	2000008c 	.word	0x2000008c
 8001138:	40012000 	.word	0x40012000
 800113c:	40000400 	.word	0x40000400
 8001140:	20000004 	.word	0x20000004
 8001144:	2000000c 	.word	0x2000000c
 8001148:	20000008 	.word	0x20000008
 800114c:	40012300 	.word	0x40012300
 8001150:	e0042000 	.word	0xe0042000
 8001154:	20000044 	.word	0x20000044
 8001158:	20000000 	.word	0x20000000

0800115c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8001160:	2002      	movs	r0, #2
 8001162:	f7ff fe67 	bl	8000e34 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8001166:	bf00      	nop
 8001168:	f7ff fe78 	bl	8000e5c <LL_FLASH_GetLatency>
 800116c:	4603      	mov	r3, r0
 800116e:	2b02      	cmp	r3, #2
 8001170:	d1fa      	bne.n	8001168 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 8001172:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001176:	f7ff fe7f 	bl	8000e78 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 800117a:	2010      	movs	r0, #16
 800117c:	f7ff fd3e 	bl	8000bfc <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8001180:	f7ff fd1a 	bl	8000bb8 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001184:	bf00      	nop
 8001186:	f7ff fd27 	bl	8000bd8 <LL_RCC_HSI_IsReady>
 800118a:	4603      	mov	r3, r0
 800118c:	2b01      	cmp	r3, #1
 800118e:	d1fa      	bne.n	8001186 <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_16, 336, LL_RCC_PLLP_DIV_4);
 8001190:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001194:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8001198:	2110      	movs	r1, #16
 800119a:	2000      	movs	r0, #0
 800119c:	f7ff fddc 	bl	8000d58 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80011a0:	f7ff fdb6 	bl	8000d10 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80011a4:	bf00      	nop
 80011a6:	f7ff fdc3 	bl	8000d30 <LL_RCC_PLL_IsReady>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d1fa      	bne.n	80011a6 <SystemClock_Config+0x4a>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 80011b0:	bf00      	nop
 80011b2:	f7ff fe75 	bl	8000ea0 <LL_PWR_IsActiveFlag_VOS>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d0fa      	beq.n	80011b2 <SystemClock_Config+0x56>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80011bc:	2000      	movs	r0, #0
 80011be:	f7ff fd55 	bl	8000c6c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80011c2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80011c6:	f7ff fd65 	bl	8000c94 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80011ca:	2000      	movs	r0, #0
 80011cc:	f7ff fd76 	bl	8000cbc <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80011d0:	2002      	movs	r0, #2
 80011d2:	f7ff fd29 	bl	8000c28 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80011d6:	bf00      	nop
 80011d8:	f7ff fd3a 	bl	8000c50 <LL_RCC_GetSysClkSource>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b08      	cmp	r3, #8
 80011e0:	d1fa      	bne.n	80011d8 <SystemClock_Config+0x7c>
  {

  }
  LL_SetSystemCoreClock(84000000);
 80011e2:	4808      	ldr	r0, [pc, #32]	; (8001204 <SystemClock_Config+0xa8>)
 80011e4:	f002 ff44 	bl	8004070 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80011e8:	200f      	movs	r0, #15
 80011ea:	f000 fcff 	bl	8001bec <HAL_InitTick>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80011f4:	f000 f9de 	bl	80015b4 <Error_Handler>
  }
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 80011f8:	2000      	movs	r0, #0
 80011fa:	f7ff fd73 	bl	8000ce4 <LL_RCC_SetTIMPrescaler>
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	0501bd00 	.word	0x0501bd00

08001208 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b090      	sub	sp, #64	; 0x40
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800120e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800121a:	f107 0320 	add.w	r3, r7, #32
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
 8001228:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
 800123c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 800123e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001242:	f7ff fddf 	bl	8000e04 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001246:	2001      	movs	r0, #1
 8001248:	f7ff fdac 	bl	8000da4 <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA0-WKUP   ------> ADC1_IN0
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800124c:	2301      	movs	r3, #1
 800124e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001250:	2303      	movs	r3, #3
 8001252:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	4619      	mov	r1, r3
 800125c:	4827      	ldr	r0, [pc, #156]	; (80012fc <MX_ADC1_Init+0xf4>)
 800125e:	f002 fbda 	bl	8003a16 <LL_GPIO_Init>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8001262:	f7ff fb7b 	bl	800095c <__NVIC_GetPriorityGrouping>
 8001266:	4603      	mov	r3, r0
 8001268:	2200      	movs	r2, #0
 800126a:	2102      	movs	r1, #2
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fbcb 	bl	8000a08 <NVIC_EncodePriority>
 8001272:	4603      	mov	r3, r0
 8001274:	4619      	mov	r1, r3
 8001276:	2012      	movs	r0, #18
 8001278:	f7ff fb9c 	bl	80009b4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 800127c:	2012      	movs	r0, #18
 800127e:	f7ff fb7b 	bl	8000978 <__NVIC_EnableIRQ>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_8B;
 8001282:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001286:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001288:	2300      	movs	r3, #0
 800128a:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 800128c:	2300      	movs	r3, #0
 800128e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001290:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001294:	4619      	mov	r1, r3
 8001296:	481a      	ldr	r0, [pc, #104]	; (8001300 <MX_ADC1_Init+0xf8>)
 8001298:	f002 fa4a 	bl	8003730 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	633b      	str	r3, [r7, #48]	; 0x30
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80012b0:	f107 0320 	add.w	r3, r7, #32
 80012b4:	4619      	mov	r1, r3
 80012b6:	4812      	ldr	r0, [pc, #72]	; (8001300 <MX_ADC1_Init+0xf8>)
 80012b8:	f002 fa66 	bl	8003788 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 80012bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012c0:	480f      	ldr	r0, [pc, #60]	; (8001300 <MX_ADC1_Init+0xf8>)
 80012c2:	f7ff fc0a 	bl	8000ada <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 80012c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012ca:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80012cc:	f107 031c 	add.w	r3, r7, #28
 80012d0:	4619      	mov	r1, r3
 80012d2:	480c      	ldr	r0, [pc, #48]	; (8001304 <MX_ADC1_Init+0xfc>)
 80012d4:	f002 fa0e 	bl	80036f4 <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 80012d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e0:	4807      	ldr	r0, [pc, #28]	; (8001300 <MX_ADC1_Init+0xf8>)
 80012e2:	f7ff fbc4 	bl	8000a6e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 80012e6:	2200      	movs	r2, #0
 80012e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80012ec:	4804      	ldr	r0, [pc, #16]	; (8001300 <MX_ADC1_Init+0xf8>)
 80012ee:	f7ff fc07 	bl	8000b00 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	3740      	adds	r7, #64	; 0x40
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40020000 	.word	0x40020000
 8001300:	40012000 	.word	0x40012000
 8001304:	40012300 	.word	0x40012300

08001308 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08e      	sub	sp, #56	; 0x38
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800130e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
 800131c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	2220      	movs	r2, #32
 8001322:	2100      	movs	r1, #0
 8001324:	4618      	mov	r0, r3
 8001326:	f002 feb3 	bl	8004090 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 800132a:	2002      	movs	r0, #2
 800132c:	f7ff fd52 	bl	8000dd4 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8001330:	f7ff fb14 	bl	800095c <__NVIC_GetPriorityGrouping>
 8001334:	4603      	mov	r3, r0
 8001336:	2200      	movs	r2, #0
 8001338:	2101      	movs	r1, #1
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fb64 	bl	8000a08 <NVIC_EncodePriority>
 8001340:	4603      	mov	r3, r0
 8001342:	4619      	mov	r1, r3
 8001344:	201d      	movs	r0, #29
 8001346:	f7ff fb35 	bl	80009b4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 800134a:	201d      	movs	r0, #29
 800134c:	f7ff fb14 	bl	8000978 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 8001350:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001354:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001356:	2300      	movs	r3, #0
 8001358:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 65535;
 800135a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001360:	2300      	movs	r3, #0
 8001362:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001368:	4619      	mov	r1, r3
 800136a:	481d      	ldr	r0, [pc, #116]	; (80013e0 <MX_TIM3_Init+0xd8>)
 800136c:	f002 fc38 	bl	8003be0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8001370:	481b      	ldr	r0, [pc, #108]	; (80013e0 <MX_TIM3_Init+0xd8>)
 8001372:	f7ff fda9 	bl	8000ec8 <LL_TIM_DisableARRPreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	461a      	mov	r2, r3
 800138e:	2101      	movs	r1, #1
 8001390:	4813      	ldr	r0, [pc, #76]	; (80013e0 <MX_TIM3_Init+0xd8>)
 8001392:	f002 fc9f 	bl	8003cd4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8001396:	2101      	movs	r1, #1
 8001398:	4811      	ldr	r0, [pc, #68]	; (80013e0 <MX_TIM3_Init+0xd8>)
 800139a:	f7ff fda5 	bl	8000ee8 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	461a      	mov	r2, r3
 80013a2:	2110      	movs	r1, #16
 80013a4:	480e      	ldr	r0, [pc, #56]	; (80013e0 <MX_TIM3_Init+0xd8>)
 80013a6:	f002 fc95 	bl	8003cd4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 80013aa:	2110      	movs	r1, #16
 80013ac:	480c      	ldr	r0, [pc, #48]	; (80013e0 <MX_TIM3_Init+0xd8>)
 80013ae:	f7ff fd9b 	bl	8000ee8 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	461a      	mov	r2, r3
 80013b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ba:	4809      	ldr	r0, [pc, #36]	; (80013e0 <MX_TIM3_Init+0xd8>)
 80013bc:	f002 fc8a 	bl	8003cd4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH3);
 80013c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c4:	4806      	ldr	r0, [pc, #24]	; (80013e0 <MX_TIM3_Init+0xd8>)
 80013c6:	f7ff fd8f 	bl	8000ee8 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80013ca:	2100      	movs	r1, #0
 80013cc:	4804      	ldr	r0, [pc, #16]	; (80013e0 <MX_TIM3_Init+0xd8>)
 80013ce:	f7ff fdd1 	bl	8000f74 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80013d2:	4803      	ldr	r0, [pc, #12]	; (80013e0 <MX_TIM3_Init+0xd8>)
 80013d4:	f7ff fde1 	bl	8000f9a <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013d8:	bf00      	nop
 80013da:	3738      	adds	r7, #56	; 0x38
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40000400 	.word	0x40000400

080013e4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	; 0x28
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ea:	f107 0318 	add.w	r3, r7, #24
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f8:	f107 0310 	add.w	r3, r7, #16
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001402:	463b      	mov	r3, r7
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800140e:	4b2b      	ldr	r3, [pc, #172]	; (80014bc <MX_TIM4_Init+0xd8>)
 8001410:	4a2b      	ldr	r2, [pc, #172]	; (80014c0 <MX_TIM4_Init+0xdc>)
 8001412:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001414:	4b29      	ldr	r3, [pc, #164]	; (80014bc <MX_TIM4_Init+0xd8>)
 8001416:	2200      	movs	r2, #0
 8001418:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141a:	4b28      	ldr	r3, [pc, #160]	; (80014bc <MX_TIM4_Init+0xd8>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001420:	4b26      	ldr	r3, [pc, #152]	; (80014bc <MX_TIM4_Init+0xd8>)
 8001422:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001426:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001428:	4b24      	ldr	r3, [pc, #144]	; (80014bc <MX_TIM4_Init+0xd8>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800142e:	4b23      	ldr	r3, [pc, #140]	; (80014bc <MX_TIM4_Init+0xd8>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001434:	4821      	ldr	r0, [pc, #132]	; (80014bc <MX_TIM4_Init+0xd8>)
 8001436:	f000 fee7 	bl	8002208 <HAL_TIM_Base_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8001440:	f000 f8b8 	bl	80015b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001448:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800144a:	f107 0318 	add.w	r3, r7, #24
 800144e:	4619      	mov	r1, r3
 8001450:	481a      	ldr	r0, [pc, #104]	; (80014bc <MX_TIM4_Init+0xd8>)
 8001452:	f001 fa3f 	bl	80028d4 <HAL_TIM_ConfigClockSource>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800145c:	f000 f8aa 	bl	80015b4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001460:	4816      	ldr	r0, [pc, #88]	; (80014bc <MX_TIM4_Init+0xd8>)
 8001462:	f000 ff20 	bl	80022a6 <HAL_TIM_IC_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800146c:	f000 f8a2 	bl	80015b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001470:	2300      	movs	r3, #0
 8001472:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	4619      	mov	r1, r3
 800147e:	480f      	ldr	r0, [pc, #60]	; (80014bc <MX_TIM4_Init+0xd8>)
 8001480:	f001 fd76 	bl	8002f70 <HAL_TIMEx_MasterConfigSynchronization>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 800148a:	f000 f893 	bl	80015b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800148e:	2302      	movs	r3, #2
 8001490:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001492:	2301      	movs	r3, #1
 8001494:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800149e:	463b      	mov	r3, r7
 80014a0:	220c      	movs	r2, #12
 80014a2:	4619      	mov	r1, r3
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_TIM4_Init+0xd8>)
 80014a6:	f001 f979 	bl	800279c <HAL_TIM_IC_ConfigChannel>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 80014b0:	f000 f880 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014b4:	bf00      	nop
 80014b6:	3728      	adds	r7, #40	; 0x28
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000044 	.word	0x20000044
 80014c0:	40000800 	.word	0x40000800

080014c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014ca:	4a12      	ldr	r2, [pc, #72]	; (8001514 <MX_USART2_UART_Init+0x50>)
 80014cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014ea:	2208      	movs	r2, #8
 80014ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014fa:	4805      	ldr	r0, [pc, #20]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014fc:	f001 fdba 	bl	8003074 <HAL_UART_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001506:	f000 f855 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	2000008c 	.word	0x2000008c
 8001514:	40004400 	.word	0x40004400

08001518 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151e:	463b      	mov	r3, r7
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
 800152c:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800152e:	2004      	movs	r0, #4
 8001530:	f7ff fc38 	bl	8000da4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001534:	2001      	movs	r0, #1
 8001536:	f7ff fc35 	bl	8000da4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800153a:	2002      	movs	r0, #2
 800153c:	f7ff fc32 	bl	8000da4 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 8001540:	2120      	movs	r1, #32
 8001542:	481a      	ldr	r0, [pc, #104]	; (80015ac <MX_GPIO_Init+0x94>)
 8001544:	f7ff fd39 	bl	8000fba <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_5);
 8001548:	2120      	movs	r1, #32
 800154a:	4819      	ldr	r0, [pc, #100]	; (80015b0 <MX_GPIO_Init+0x98>)
 800154c:	f7ff fd35 	bl	8000fba <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8001550:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001554:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001556:	2300      	movs	r3, #0
 8001558:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800155e:	463b      	mov	r3, r7
 8001560:	4619      	mov	r1, r3
 8001562:	4813      	ldr	r0, [pc, #76]	; (80015b0 <MX_GPIO_Init+0x98>)
 8001564:	f002 fa57 	bl	8003a16 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001568:	2320      	movs	r3, #32
 800156a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800156c:	2301      	movs	r3, #1
 800156e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001578:	2300      	movs	r3, #0
 800157a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157c:	463b      	mov	r3, r7
 800157e:	4619      	mov	r1, r3
 8001580:	480a      	ldr	r0, [pc, #40]	; (80015ac <MX_GPIO_Init+0x94>)
 8001582:	f002 fa48 	bl	8003a16 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001586:	2320      	movs	r3, #32
 8001588:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800158a:	2301      	movs	r3, #1
 800158c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800159a:	463b      	mov	r3, r7
 800159c:	4619      	mov	r1, r3
 800159e:	4804      	ldr	r0, [pc, #16]	; (80015b0 <MX_GPIO_Init+0x98>)
 80015a0:	f002 fa39 	bl	8003a16 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015a4:	bf00      	nop
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40020000 	.word	0x40020000
 80015b0:	40020800 	.word	0x40020800

080015b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80015b8:	b672      	cpsid	i
}
 80015ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015bc:	e7fe      	b.n	80015bc <Error_Handler+0x8>
	...

080015c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <HAL_MspInit+0x4c>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	4a0f      	ldr	r2, [pc, #60]	; (800160c <HAL_MspInit+0x4c>)
 80015d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d4:	6453      	str	r3, [r2, #68]	; 0x44
 80015d6:	4b0d      	ldr	r3, [pc, #52]	; (800160c <HAL_MspInit+0x4c>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	603b      	str	r3, [r7, #0]
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <HAL_MspInit+0x4c>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	4a08      	ldr	r2, [pc, #32]	; (800160c <HAL_MspInit+0x4c>)
 80015ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f0:	6413      	str	r3, [r2, #64]	; 0x40
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_MspInit+0x4c>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40023800 	.word	0x40023800

08001610 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	; 0x28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a1d      	ldr	r2, [pc, #116]	; (80016a4 <HAL_TIM_Base_MspInit+0x94>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d134      	bne.n	800169c <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <HAL_TIM_Base_MspInit+0x98>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	4a1b      	ldr	r2, [pc, #108]	; (80016a8 <HAL_TIM_Base_MspInit+0x98>)
 800163c:	f043 0304 	orr.w	r3, r3, #4
 8001640:	6413      	str	r3, [r2, #64]	; 0x40
 8001642:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <HAL_TIM_Base_MspInit+0x98>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f003 0304 	and.w	r3, r3, #4
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <HAL_TIM_Base_MspInit+0x98>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a14      	ldr	r2, [pc, #80]	; (80016a8 <HAL_TIM_Base_MspInit+0x98>)
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_TIM_Base_MspInit+0x98>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800166a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800166e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	2300      	movs	r3, #0
 800167a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800167c:	2302      	movs	r3, #2
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	4619      	mov	r1, r3
 8001686:	4809      	ldr	r0, [pc, #36]	; (80016ac <HAL_TIM_Base_MspInit+0x9c>)
 8001688:	f000 fc06 	bl	8001e98 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800168c:	2200      	movs	r2, #0
 800168e:	2100      	movs	r1, #0
 8001690:	201e      	movs	r0, #30
 8001692:	f000 fbca 	bl	8001e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001696:	201e      	movs	r0, #30
 8001698:	f000 fbe3 	bl	8001e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800169c:	bf00      	nop
 800169e:	3728      	adds	r7, #40	; 0x28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40000800 	.word	0x40000800
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40020400 	.word	0x40020400

080016b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	; 0x28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a19      	ldr	r2, [pc, #100]	; (8001734 <HAL_UART_MspInit+0x84>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d12b      	bne.n	800172a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	4b18      	ldr	r3, [pc, #96]	; (8001738 <HAL_UART_MspInit+0x88>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	4a17      	ldr	r2, [pc, #92]	; (8001738 <HAL_UART_MspInit+0x88>)
 80016dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e0:	6413      	str	r3, [r2, #64]	; 0x40
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <HAL_UART_MspInit+0x88>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <HAL_UART_MspInit+0x88>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a10      	ldr	r2, [pc, #64]	; (8001738 <HAL_UART_MspInit+0x88>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <HAL_UART_MspInit+0x88>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800170a:	230c      	movs	r3, #12
 800170c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001716:	2303      	movs	r3, #3
 8001718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800171a:	2307      	movs	r3, #7
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	4805      	ldr	r0, [pc, #20]	; (800173c <HAL_UART_MspInit+0x8c>)
 8001726:	f000 fbb7 	bl	8001e98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800172a:	bf00      	nop
 800172c:	3728      	adds	r7, #40	; 0x28
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40004400 	.word	0x40004400
 8001738:	40023800 	.word	0x40023800
 800173c:	40020000 	.word	0x40020000

08001740 <LL_ADC_REG_SetSequencerRanks>:
{
 8001740:	b480      	push	{r7}
 8001742:	b089      	sub	sp, #36	; 0x24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	332c      	adds	r3, #44	; 0x2c
 8001750:	4619      	mov	r1, r3
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001758:	f44f 7240 	mov.w	r2, #768	; 0x300
 800175c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	fa92 f2a2 	rbit	r2, r2
 8001764:	617a      	str	r2, [r7, #20]
  return result;
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	fab2 f282 	clz	r2, r2
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	40d3      	lsrs	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	440b      	add	r3, r1
 8001774:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	f003 031f 	and.w	r3, r3, #31
 8001780:	211f      	movs	r1, #31
 8001782:	fa01 f303 	lsl.w	r3, r1, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	401a      	ands	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f003 011f 	and.w	r1, r3, #31
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	f003 031f 	and.w	r3, r3, #31
 8001796:	fa01 f303 	lsl.w	r3, r1, r3
 800179a:	431a      	orrs	r2, r3
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	601a      	str	r2, [r3, #0]
}
 80017a0:	bf00      	nop
 80017a2:	3724      	adds	r7, #36	; 0x24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <NMI_Handler+0x4>

080017b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b6:	e7fe      	b.n	80017b6 <HardFault_Handler+0x4>

080017b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017bc:	e7fe      	b.n	80017bc <MemManage_Handler+0x4>

080017be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c2:	e7fe      	b.n	80017c2 <BusFault_Handler+0x4>

080017c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <UsageFault_Handler+0x4>

080017ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f8:	f000 fa28 	bl	8001c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}

08001800 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

	if (flag_temperatura == 0 || flag_tensione == 0){
 8001804:	4b6a      	ldr	r3, [pc, #424]	; (80019b0 <ADC_IRQHandler+0x1b0>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d004      	beq.n	8001816 <ADC_IRQHandler+0x16>
 800180c:	4b69      	ldr	r3, [pc, #420]	; (80019b4 <ADC_IRQHandler+0x1b4>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	f040 80bb 	bne.w	800198c <ADC_IRQHandler+0x18c>
	if (flag_temperatura == 1){ // se ha finito la misura di temperatura
 8001816:	4b66      	ldr	r3, [pc, #408]	; (80019b0 <ADC_IRQHandler+0x1b0>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d153      	bne.n	80018c6 <ADC_IRQHandler+0xc6>
		valore_sensore_T = LL_ADC_ReadReg(ADC1, DR); // assegno ad una varibile il valore della conversione
 800181e:	4b66      	ldr	r3, [pc, #408]	; (80019b8 <ADC_IRQHandler+0x1b8>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	ee07 3a90 	vmov	s15, r3
 8001826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800182a:	4b64      	ldr	r3, [pc, #400]	; (80019bc <ADC_IRQHandler+0x1bc>)
 800182c:	edc3 7a00 	vstr	s15, [r3]
		temperatura = ((valore_sensore_T - V25)/avg_slope) + 25 ;// calcolo la temperatura attraverso l'equazione data nel datasheet
 8001830:	4b62      	ldr	r3, [pc, #392]	; (80019bc <ADC_IRQHandler+0x1bc>)
 8001832:	ed93 7a00 	vldr	s14, [r3]
 8001836:	4b62      	ldr	r3, [pc, #392]	; (80019c0 <ADC_IRQHandler+0x1c0>)
 8001838:	edd3 7a00 	vldr	s15, [r3]
 800183c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001840:	4b60      	ldr	r3, [pc, #384]	; (80019c4 <ADC_IRQHandler+0x1c4>)
 8001842:	ed93 7a00 	vldr	s14, [r3]
 8001846:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800184a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800184e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001852:	4b5d      	ldr	r3, [pc, #372]	; (80019c8 <ADC_IRQHandler+0x1c8>)
 8001854:	edc3 7a00 	vstr	s15, [r3]
		temperatura -= 26; // correzione dell offset del sensore di temperatura
 8001858:	4b5b      	ldr	r3, [pc, #364]	; (80019c8 <ADC_IRQHandler+0x1c8>)
 800185a:	edd3 7a00 	vldr	s15, [r3]
 800185e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8001862:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001866:	4b58      	ldr	r3, [pc, #352]	; (80019c8 <ADC_IRQHandler+0x1c8>)
 8001868:	edc3 7a00 	vstr	s15, [r3]
		LL_ADC_WriteReg(ADC1,SR, LL_ADC_ReadReg(ADC1,SR) & ~0b10); // tolgo flag conversione
 800186c:	4b52      	ldr	r3, [pc, #328]	; (80019b8 <ADC_IRQHandler+0x1b8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a51      	ldr	r2, [pc, #324]	; (80019b8 <ADC_IRQHandler+0x1b8>)
 8001872:	f023 0302 	bic.w	r3, r3, #2
 8001876:	6013      	str	r3, [r2, #0]
		flag_temperatura = 0; // segnalo che la scansione di temperatura è avvenuta
 8001878:	4b4d      	ldr	r3, [pc, #308]	; (80019b0 <ADC_IRQHandler+0x1b0>)
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]


		if (temperatura > -40 && temperatura < 125){  // se il valore di temperatura entra nel range dato dal datasheet
 800187e:	4b52      	ldr	r3, [pc, #328]	; (80019c8 <ADC_IRQHandler+0x1c8>)
 8001880:	edd3 7a00 	vldr	s15, [r3]
 8001884:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80019cc <ADC_IRQHandler+0x1cc>
 8001888:	eef4 7ac7 	vcmpe.f32	s15, s14
 800188c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001890:	dd14      	ble.n	80018bc <ADC_IRQHandler+0xbc>
 8001892:	4b4d      	ldr	r3, [pc, #308]	; (80019c8 <ADC_IRQHandler+0x1c8>)
 8001894:	edd3 7a00 	vldr	s15, [r3]
 8001898:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80019d0 <ADC_IRQHandler+0x1d0>
 800189c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a4:	d50a      	bpl.n	80018bc <ADC_IRQHandler+0xbc>
			HAL_UART_Transmit_IT(&huart2,"temperatura = ", sizeof(("temperatura = " )));
 80018a6:	220f      	movs	r2, #15
 80018a8:	494a      	ldr	r1, [pc, #296]	; (80019d4 <ADC_IRQHandler+0x1d4>)
 80018aa:	484b      	ldr	r0, [pc, #300]	; (80019d8 <ADC_IRQHandler+0x1d8>)
 80018ac:	f001 fc2f 	bl	800310e <HAL_UART_Transmit_IT>
			//sprintf(buffer_temperatura, "%1.f", temperatura); // salvo in buffer il valore della temperatura in char
			//HAL_UART_Transmit_IT(&huart2, buffer_temperatura, sizeof(buffer_temperatura), 1);
			HAL_UART_Transmit_IT(&huart2,"\n", sizeof(("\n" )));
 80018b0:	2202      	movs	r2, #2
 80018b2:	494a      	ldr	r1, [pc, #296]	; (80019dc <ADC_IRQHandler+0x1dc>)
 80018b4:	4848      	ldr	r0, [pc, #288]	; (80019d8 <ADC_IRQHandler+0x1d8>)
 80018b6:	f001 fc2a 	bl	800310e <HAL_UART_Transmit_IT>
 80018ba:	e004      	b.n	80018c6 <ADC_IRQHandler+0xc6>
		}

		else {
			HAL_UART_Transmit_IT(&huart2,"errore : temperatura out of range", sizeof(("errore : temperatura out of range")));
 80018bc:	2222      	movs	r2, #34	; 0x22
 80018be:	4948      	ldr	r1, [pc, #288]	; (80019e0 <ADC_IRQHandler+0x1e0>)
 80018c0:	4845      	ldr	r0, [pc, #276]	; (80019d8 <ADC_IRQHandler+0x1d8>)
 80018c2:	f001 fc24 	bl	800310e <HAL_UART_Transmit_IT>
	}




	 if (flag_tensione == 1){  // se ha finito la misura di tensione
 80018c6:	4b3b      	ldr	r3, [pc, #236]	; (80019b4 <ADC_IRQHandler+0x1b4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d165      	bne.n	800199a <ADC_IRQHandler+0x19a>

		LL_ADC_WriteReg(ADC1,SR, LL_ADC_ReadReg(ADC1,SR) & ~0b10); // tolgo flag conversione
 80018ce:	4b3a      	ldr	r3, [pc, #232]	; (80019b8 <ADC_IRQHandler+0x1b8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a39      	ldr	r2, [pc, #228]	; (80019b8 <ADC_IRQHandler+0x1b8>)
 80018d4:	f023 0302 	bic.w	r3, r3, #2
 80018d8:	6013      	str	r3, [r2, #0]
		flag_tensione = 0;                           // azzero flag prima scansione
 80018da:	4b36      	ldr	r3, [pc, #216]	; (80019b4 <ADC_IRQHandler+0x1b4>)
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
		valore_sensore_V =  LL_ADC_ReadReg(ADC1, DR); // assegno ad una varibile il valore della conversione
 80018e0:	4b35      	ldr	r3, [pc, #212]	; (80019b8 <ADC_IRQHandler+0x1b8>)
 80018e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e4:	ee07 3a90 	vmov	s15, r3
 80018e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018ec:	4b3d      	ldr	r3, [pc, #244]	; (80019e4 <ADC_IRQHandler+0x1e4>)
 80018ee:	edc3 7a00 	vstr	s15, [r3]
		tensione = (Vdd/256) * valore_sensore_V; // calcolo la tensione
 80018f2:	4b3d      	ldr	r3, [pc, #244]	; (80019e8 <ADC_IRQHandler+0x1e8>)
 80018f4:	edd3 7a00 	vldr	s15, [r3]
 80018f8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80019ec <ADC_IRQHandler+0x1ec>
 80018fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001900:	4b38      	ldr	r3, [pc, #224]	; (80019e4 <ADC_IRQHandler+0x1e4>)
 8001902:	edd3 7a00 	vldr	s15, [r3]
 8001906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800190a:	4b39      	ldr	r3, [pc, #228]	; (80019f0 <ADC_IRQHandler+0x1f0>)
 800190c:	edc3 7a00 	vstr	s15, [r3]

		if (tensione < 1.8){
 8001910:	4b37      	ldr	r3, [pc, #220]	; (80019f0 <ADC_IRQHandler+0x1f0>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe fdc3 	bl	80004a0 <__aeabi_f2d>
 800191a:	a321      	add	r3, pc, #132	; (adr r3, 80019a0 <ADC_IRQHandler+0x1a0>)
 800191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001920:	f7fe fe76 	bl	8000610 <__aeabi_dcmplt>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d009      	beq.n	800193e <ADC_IRQHandler+0x13e>
			stato_corrente = danger_state;
 800192a:	4b32      	ldr	r3, [pc, #200]	; (80019f4 <ADC_IRQHandler+0x1f4>)
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
			LL_GPIO_WriteReg(GPIOA, ODR, LL_GPIO_ReadReg(GPIOA, ODR) | 0b100000); // accendo GPIO PA5 collegato al led verde sulla board
 8001930:	4b31      	ldr	r3, [pc, #196]	; (80019f8 <ADC_IRQHandler+0x1f8>)
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	4a30      	ldr	r2, [pc, #192]	; (80019f8 <ADC_IRQHandler+0x1f8>)
 8001936:	f043 0320 	orr.w	r3, r3, #32
 800193a:	6153      	str	r3, [r2, #20]
	 if (flag_tensione == 1){  // se ha finito la misura di tensione
 800193c:	e02d      	b.n	800199a <ADC_IRQHandler+0x19a>

		}

		else if (tensione > 2.7){
 800193e:	4b2c      	ldr	r3, [pc, #176]	; (80019f0 <ADC_IRQHandler+0x1f0>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fdac 	bl	80004a0 <__aeabi_f2d>
 8001948:	a317      	add	r3, pc, #92	; (adr r3, 80019a8 <ADC_IRQHandler+0x1a8>)
 800194a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194e:	f7fe fe7d 	bl	800064c <__aeabi_dcmpgt>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d009      	beq.n	800196c <ADC_IRQHandler+0x16c>
			stato_corrente = danger_state;
 8001958:	4b26      	ldr	r3, [pc, #152]	; (80019f4 <ADC_IRQHandler+0x1f4>)
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
			LL_GPIO_WriteReg(GPIOC, ODR, LL_GPIO_ReadReg(GPIOA, ODR) | 0b100000); // accendo GPIO PC5 collegato al led rosso sulla breadboard
 800195e:	4b26      	ldr	r3, [pc, #152]	; (80019f8 <ADC_IRQHandler+0x1f8>)
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	4a26      	ldr	r2, [pc, #152]	; (80019fc <ADC_IRQHandler+0x1fc>)
 8001964:	f043 0320 	orr.w	r3, r3, #32
 8001968:	6153      	str	r3, [r2, #20]
	 if (flag_tensione == 1){  // se ha finito la misura di tensione
 800196a:	e016      	b.n	800199a <ADC_IRQHandler+0x19a>


		}

		else {
			stato_corrente = running_state;
 800196c:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <ADC_IRQHandler+0x1f4>)
 800196e:	2202      	movs	r2, #2
 8001970:	701a      	strb	r2, [r3, #0]
			LL_GPIO_WriteReg(GPIOC, ODR, LL_GPIO_ReadReg(GPIOA, ODR) & ~0b100000); // spengo GPIO PC5 collegato al led rosso sulla breadboard
 8001972:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <ADC_IRQHandler+0x1f8>)
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	4a21      	ldr	r2, [pc, #132]	; (80019fc <ADC_IRQHandler+0x1fc>)
 8001978:	f023 0320 	bic.w	r3, r3, #32
 800197c:	6153      	str	r3, [r2, #20]
			LL_GPIO_WriteReg(GPIOA, ODR, LL_GPIO_ReadReg(GPIOA, ODR) & ~0b100000); // spengo GPIO PA5 collegato al led verde sulla board
 800197e:	4b1e      	ldr	r3, [pc, #120]	; (80019f8 <ADC_IRQHandler+0x1f8>)
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	4a1d      	ldr	r2, [pc, #116]	; (80019f8 <ADC_IRQHandler+0x1f8>)
 8001984:	f023 0320 	bic.w	r3, r3, #32
 8001988:	6153      	str	r3, [r2, #20]
	 if (flag_tensione == 1){  // se ha finito la misura di tensione
 800198a:	e006      	b.n	800199a <ADC_IRQHandler+0x19a>

	}
	}

	else {
		flag_temperatura = 0;
 800198c:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <ADC_IRQHandler+0x1b0>)
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
		flag_tensione = 0;
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <ADC_IRQHandler+0x1b4>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
  /* USER CODE END ADC_IRQn 0 */

  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	cccccccd 	.word	0xcccccccd
 80019a4:	3ffccccc 	.word	0x3ffccccc
 80019a8:	9999999a 	.word	0x9999999a
 80019ac:	40059999 	.word	0x40059999
 80019b0:	200000e8 	.word	0x200000e8
 80019b4:	200000e4 	.word	0x200000e4
 80019b8:	40012000 	.word	0x40012000
 80019bc:	200000d4 	.word	0x200000d4
 80019c0:	20000010 	.word	0x20000010
 80019c4:	20000014 	.word	0x20000014
 80019c8:	200000d8 	.word	0x200000d8
 80019cc:	c2200000 	.word	0xc2200000
 80019d0:	42fa0000 	.word	0x42fa0000
 80019d4:	08004100 	.word	0x08004100
 80019d8:	2000008c 	.word	0x2000008c
 80019dc:	08004110 	.word	0x08004110
 80019e0:	08004114 	.word	0x08004114
 80019e4:	200000dc 	.word	0x200000dc
 80019e8:	20000018 	.word	0x20000018
 80019ec:	43800000 	.word	0x43800000
 80019f0:	200000e0 	.word	0x200000e0
 80019f4:	20000000 	.word	0x20000000
 80019f8:	40020000 	.word	0x40020000
 80019fc:	40020800 	.word	0x40020800

08001a00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

	if (stato_corrente == running_state){ // se sono in stato run
 8001a04:	4b3a      	ldr	r3, [pc, #232]	; (8001af0 <TIM3_IRQHandler+0xf0>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d121      	bne.n	8001a52 <TIM3_IRQHandler+0x52>

		if ((LL_TIM_ReadReg(TIM3,SR) & 0b1000) == 0b1000) {  // se flag ch3 200ms è alzata (temperatura)
 8001a0e:	4b39      	ldr	r3, [pc, #228]	; (8001af4 <TIM3_IRQHandler+0xf4>)
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b08      	cmp	r3, #8
 8001a18:	d11b      	bne.n	8001a52 <TIM3_IRQHandler+0x52>

			LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_18); // scelgo canale 18 (temperatura)
 8001a1a:	4a37      	ldr	r2, [pc, #220]	; (8001af8 <TIM3_IRQHandler+0xf8>)
 8001a1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a20:	4836      	ldr	r0, [pc, #216]	; (8001afc <TIM3_IRQHandler+0xfc>)
 8001a22:	f7ff fe8d 	bl	8001740 <LL_ADC_REG_SetSequencerRanks>
			LL_ADC_WriteReg(ADC1, CR2,LL_ADC_ReadReg(ADC1, CR2) | 0x40000000); // start adc (bit 30)
 8001a26:	4b35      	ldr	r3, [pc, #212]	; (8001afc <TIM3_IRQHandler+0xfc>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	4a34      	ldr	r2, [pc, #208]	; (8001afc <TIM3_IRQHandler+0xfc>)
 8001a2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a30:	6093      	str	r3, [r2, #8]
			LL_TIM_WriteReg(TIM3, SR, (LL_TIM_ReadReg(TIM3,SR) & ~0b1000)); // resetto flag
 8001a32:	4b30      	ldr	r3, [pc, #192]	; (8001af4 <TIM3_IRQHandler+0xf4>)
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	4a2f      	ldr	r2, [pc, #188]	; (8001af4 <TIM3_IRQHandler+0xf4>)
 8001a38:	f023 0308 	bic.w	r3, r3, #8
 8001a3c:	6113      	str	r3, [r2, #16]
			flag_temperatura = 1;
 8001a3e:	4b30      	ldr	r3, [pc, #192]	; (8001b00 <TIM3_IRQHandler+0x100>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	601a      	str	r2, [r3, #0]
			LL_TIM_WriteReg(TIM3, CCR3, (LL_TIM_ReadReg(TIM3,CCR3) + soglia_200ms)); // aggiorno soglia di ch3 200ms
 8001a44:	4b2b      	ldr	r3, [pc, #172]	; (8001af4 <TIM3_IRQHandler+0xf4>)
 8001a46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a48:	4b2e      	ldr	r3, [pc, #184]	; (8001b04 <TIM3_IRQHandler+0x104>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4929      	ldr	r1, [pc, #164]	; (8001af4 <TIM3_IRQHandler+0xf4>)
 8001a4e:	4413      	add	r3, r2
 8001a50:	63cb      	str	r3, [r1, #60]	; 0x3c
		}
	}



 	 if (stato_corrente == running_state || stato_corrente == danger_state){
 8001a52:	4b27      	ldr	r3, [pc, #156]	; (8001af0 <TIM3_IRQHandler+0xf0>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d004      	beq.n	8001a66 <TIM3_IRQHandler+0x66>
 8001a5c:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <TIM3_IRQHandler+0xf0>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d123      	bne.n	8001aae <TIM3_IRQHandler+0xae>
		if ((LL_TIM_ReadReg(TIM3,SR) & 0b100) == 0b100){ // se flag ch2 350ms è alzata (tensione)
 8001a66:	4b23      	ldr	r3, [pc, #140]	; (8001af4 <TIM3_IRQHandler+0xf4>)
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	f003 0304 	and.w	r3, r3, #4
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	d13b      	bne.n	8001aea <TIM3_IRQHandler+0xea>

			LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0); // scelgo canale 0 (tensione)
 8001a72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a7a:	4820      	ldr	r0, [pc, #128]	; (8001afc <TIM3_IRQHandler+0xfc>)
 8001a7c:	f7ff fe60 	bl	8001740 <LL_ADC_REG_SetSequencerRanks>
			flag_tensione = 1;
 8001a80:	4b21      	ldr	r3, [pc, #132]	; (8001b08 <TIM3_IRQHandler+0x108>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	601a      	str	r2, [r3, #0]
			LL_ADC_WriteReg(ADC1, CR2,LL_ADC_ReadReg(ADC1, CR2) | 0x40000000); // start adc (bit 30)
 8001a86:	4b1d      	ldr	r3, [pc, #116]	; (8001afc <TIM3_IRQHandler+0xfc>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	4a1c      	ldr	r2, [pc, #112]	; (8001afc <TIM3_IRQHandler+0xfc>)
 8001a8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a90:	6093      	str	r3, [r2, #8]
			LL_TIM_WriteReg(TIM3, SR, (LL_TIM_ReadReg(TIM3,SR) & ~0b100)); // resetto flag
 8001a92:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <TIM3_IRQHandler+0xf4>)
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	4a17      	ldr	r2, [pc, #92]	; (8001af4 <TIM3_IRQHandler+0xf4>)
 8001a98:	f023 0304 	bic.w	r3, r3, #4
 8001a9c:	6113      	str	r3, [r2, #16]
			LL_TIM_WriteReg(TIM3, CCR2, (LL_TIM_ReadReg(TIM3,CCR2) + soglia_350ms)); // aggiorno soglia di ch2 350ms
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <TIM3_IRQHandler+0xf4>)
 8001aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001aa2:	4b1a      	ldr	r3, [pc, #104]	; (8001b0c <TIM3_IRQHandler+0x10c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4913      	ldr	r1, [pc, #76]	; (8001af4 <TIM3_IRQHandler+0xf4>)
 8001aa8:	4413      	add	r3, r2
 8001aaa:	638b      	str	r3, [r1, #56]	; 0x38
		if ((LL_TIM_ReadReg(TIM3,SR) & 0b100) == 0b100){ // se flag ch2 350ms è alzata (tensione)
 8001aac:	e01d      	b.n	8001aea <TIM3_IRQHandler+0xea>
		}
	}



	else if (((LL_TIM_ReadReg(TIM3,SR) & 0b10) == 0b10) && stato_corrente == waiting_state){   //se flag ch1 500ms è alzata e sono in stato wait
 8001aae:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <TIM3_IRQHandler+0xf4>)
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d117      	bne.n	8001aea <TIM3_IRQHandler+0xea>
 8001aba:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <TIM3_IRQHandler+0xf0>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d112      	bne.n	8001aea <TIM3_IRQHandler+0xea>

		  LL_TIM_WriteReg(TIM3, SR, (LL_TIM_ReadReg(TIM3,SR) & ~0b10)); // resetto flag
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <TIM3_IRQHandler+0xf4>)
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	4a0a      	ldr	r2, [pc, #40]	; (8001af4 <TIM3_IRQHandler+0xf4>)
 8001aca:	f023 0302 	bic.w	r3, r3, #2
 8001ace:	6113      	str	r3, [r2, #16]
		  HAL_UART_Transmit_IT(&huart2,"Board in waiting state - please press the emergency button", sizeof("Board in waiting state - please press the emergency button"));
 8001ad0:	223b      	movs	r2, #59	; 0x3b
 8001ad2:	490f      	ldr	r1, [pc, #60]	; (8001b10 <TIM3_IRQHandler+0x110>)
 8001ad4:	480f      	ldr	r0, [pc, #60]	; (8001b14 <TIM3_IRQHandler+0x114>)
 8001ad6:	f001 fb1a 	bl	800310e <HAL_UART_Transmit_IT>
		  LL_TIM_WriteReg(TIM3, CCR1, (LL_TIM_ReadReg(TIM3,CCR1) + soglia_500ms)); // aggiorno soglia di ch1 500ms
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <TIM3_IRQHandler+0xf4>)
 8001adc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <TIM3_IRQHandler+0x118>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4904      	ldr	r1, [pc, #16]	; (8001af4 <TIM3_IRQHandler+0xf4>)
 8001ae4:	4413      	add	r3, r2
 8001ae6:	634b      	str	r3, [r1, #52]	; 0x34
			  		  }
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ae8:	e7ff      	b.n	8001aea <TIM3_IRQHandler+0xea>
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000000 	.word	0x20000000
 8001af4:	40000400 	.word	0x40000400
 8001af8:	01800012 	.word	0x01800012
 8001afc:	40012000 	.word	0x40012000
 8001b00:	200000e8 	.word	0x200000e8
 8001b04:	20000008 	.word	0x20000008
 8001b08:	200000e4 	.word	0x200000e4
 8001b0c:	2000000c 	.word	0x2000000c
 8001b10:	08004138 	.word	0x08004138
 8001b14:	2000008c 	.word	0x2000008c
 8001b18:	20000004 	.word	0x20000004

08001b1c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b20:	4802      	ldr	r0, [pc, #8]	; (8001b2c <TIM4_IRQHandler+0x10>)
 8001b22:	f000 fd33 	bl	800258c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000044 	.word	0x20000044

08001b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <SystemInit+0x20>)
 8001b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3a:	4a05      	ldr	r2, [pc, #20]	; (8001b50 <SystemInit+0x20>)
 8001b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b58:	480d      	ldr	r0, [pc, #52]	; (8001b90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b5a:	490e      	ldr	r1, [pc, #56]	; (8001b94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b5c:	4a0e      	ldr	r2, [pc, #56]	; (8001b98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b60:	e002      	b.n	8001b68 <LoopCopyDataInit>

08001b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b66:	3304      	adds	r3, #4

08001b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b6c:	d3f9      	bcc.n	8001b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6e:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b70:	4c0b      	ldr	r4, [pc, #44]	; (8001ba0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b74:	e001      	b.n	8001b7a <LoopFillZerobss>

08001b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b78:	3204      	adds	r2, #4

08001b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b7c:	d3fb      	bcc.n	8001b76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b7e:	f7ff ffd7 	bl	8001b30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b82:	f002 fa8d 	bl	80040a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b86:	f7ff fa5d 	bl	8001044 <main>
  bx  lr    
 8001b8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b94:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001b98:	0800419c 	.word	0x0800419c
  ldr r2, =_sbss
 8001b9c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001ba0:	200000f0 	.word	0x200000f0

08001ba4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba4:	e7fe      	b.n	8001ba4 <DMA1_Stream0_IRQHandler>
	...

08001ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bac:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <HAL_Init+0x40>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0d      	ldr	r2, [pc, #52]	; (8001be8 <HAL_Init+0x40>)
 8001bb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_Init+0x40>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <HAL_Init+0x40>)
 8001bbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc4:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <HAL_Init+0x40>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a07      	ldr	r2, [pc, #28]	; (8001be8 <HAL_Init+0x40>)
 8001bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd0:	2003      	movs	r0, #3
 8001bd2:	f000 f91f 	bl	8001e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bd6:	200f      	movs	r0, #15
 8001bd8:	f000 f808 	bl	8001bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bdc:	f7ff fcf0 	bl	80015c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40023c00 	.word	0x40023c00

08001bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_InitTick+0x54>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <HAL_InitTick+0x58>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 f937 	bl	8001e7e <HAL_SYSTICK_Config>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e00e      	b.n	8001c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b0f      	cmp	r3, #15
 8001c1e:	d80a      	bhi.n	8001c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c20:	2200      	movs	r2, #0
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295
 8001c28:	f000 f8ff 	bl	8001e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c2c:	4a06      	ldr	r2, [pc, #24]	; (8001c48 <HAL_InitTick+0x5c>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	e000      	b.n	8001c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	2000001c 	.word	0x2000001c
 8001c44:	20000024 	.word	0x20000024
 8001c48:	20000020 	.word	0x20000020

08001c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_IncTick+0x20>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_IncTick+0x24>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <HAL_IncTick+0x24>)
 8001c5e:	6013      	str	r3, [r2, #0]
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	20000024 	.word	0x20000024
 8001c70:	200000ec 	.word	0x200000ec

08001c74 <__NVIC_SetPriorityGrouping>:
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c90:	4013      	ands	r3, r2
 8001c92:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ca6:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	60d3      	str	r3, [r2, #12]
}
 8001cac:	bf00      	nop
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <__NVIC_GetPriorityGrouping>:
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc0:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	0a1b      	lsrs	r3, r3, #8
 8001cc6:	f003 0307 	and.w	r3, r3, #7
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <__NVIC_EnableIRQ>:
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	db0b      	blt.n	8001d02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	f003 021f 	and.w	r2, r3, #31
 8001cf0:	4907      	ldr	r1, [pc, #28]	; (8001d10 <__NVIC_EnableIRQ+0x38>)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	095b      	lsrs	r3, r3, #5
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8001cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	e000e100 	.word	0xe000e100

08001d14 <__NVIC_SetPriority>:
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	6039      	str	r1, [r7, #0]
 8001d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	db0a      	blt.n	8001d3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	490c      	ldr	r1, [pc, #48]	; (8001d60 <__NVIC_SetPriority+0x4c>)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	0112      	lsls	r2, r2, #4
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	440b      	add	r3, r1
 8001d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d3c:	e00a      	b.n	8001d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	4908      	ldr	r1, [pc, #32]	; (8001d64 <__NVIC_SetPriority+0x50>)
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	3b04      	subs	r3, #4
 8001d4c:	0112      	lsls	r2, r2, #4
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	440b      	add	r3, r1
 8001d52:	761a      	strb	r2, [r3, #24]
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000e100 	.word	0xe000e100
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <NVIC_EncodePriority>:
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b089      	sub	sp, #36	; 0x24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f1c3 0307 	rsb	r3, r3, #7
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	bf28      	it	cs
 8001d86:	2304      	movcs	r3, #4
 8001d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	2b06      	cmp	r3, #6
 8001d90:	d902      	bls.n	8001d98 <NVIC_EncodePriority+0x30>
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3b03      	subs	r3, #3
 8001d96:	e000      	b.n	8001d9a <NVIC_EncodePriority+0x32>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43da      	mvns	r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	401a      	ands	r2, r3
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db0:	f04f 31ff 	mov.w	r1, #4294967295
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dba:	43d9      	mvns	r1, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	4313      	orrs	r3, r2
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3724      	adds	r7, #36	; 0x24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001de0:	d301      	bcc.n	8001de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001de2:	2301      	movs	r3, #1
 8001de4:	e00f      	b.n	8001e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001de6:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <SysTick_Config+0x40>)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dee:	210f      	movs	r1, #15
 8001df0:	f04f 30ff 	mov.w	r0, #4294967295
 8001df4:	f7ff ff8e 	bl	8001d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <SysTick_Config+0x40>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dfe:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <SysTick_Config+0x40>)
 8001e00:	2207      	movs	r2, #7
 8001e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	e000e010 	.word	0xe000e010

08001e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff ff29 	bl	8001c74 <__NVIC_SetPriorityGrouping>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b086      	sub	sp, #24
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	607a      	str	r2, [r7, #4]
 8001e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e3c:	f7ff ff3e 	bl	8001cbc <__NVIC_GetPriorityGrouping>
 8001e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	68b9      	ldr	r1, [r7, #8]
 8001e46:	6978      	ldr	r0, [r7, #20]
 8001e48:	f7ff ff8e 	bl	8001d68 <NVIC_EncodePriority>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e52:	4611      	mov	r1, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff5d 	bl	8001d14 <__NVIC_SetPriority>
}
 8001e5a:	bf00      	nop
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	4603      	mov	r3, r0
 8001e6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ff31 	bl	8001cd8 <__NVIC_EnableIRQ>
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff ffa2 	bl	8001dd0 <SysTick_Config>
 8001e8c:	4603      	mov	r3, r0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b089      	sub	sp, #36	; 0x24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]
 8001eb2:	e159      	b.n	8002168 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	f040 8148 	bne.w	8002162 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d005      	beq.n	8001eea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d130      	bne.n	8001f4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	68da      	ldr	r2, [r3, #12]
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f20:	2201      	movs	r2, #1
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	091b      	lsrs	r3, r3, #4
 8001f36:	f003 0201 	and.w	r2, r3, #1
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 0303 	and.w	r3, r3, #3
 8001f54:	2b03      	cmp	r3, #3
 8001f56:	d017      	beq.n	8001f88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	2203      	movs	r2, #3
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d123      	bne.n	8001fdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	08da      	lsrs	r2, r3, #3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3208      	adds	r2, #8
 8001f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	220f      	movs	r2, #15
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	691a      	ldr	r2, [r3, #16]
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	08da      	lsrs	r2, r3, #3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3208      	adds	r2, #8
 8001fd6:	69b9      	ldr	r1, [r7, #24]
 8001fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 0203 	and.w	r2, r3, #3
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 80a2 	beq.w	8002162 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	4b57      	ldr	r3, [pc, #348]	; (8002180 <HAL_GPIO_Init+0x2e8>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	4a56      	ldr	r2, [pc, #344]	; (8002180 <HAL_GPIO_Init+0x2e8>)
 8002028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800202c:	6453      	str	r3, [r2, #68]	; 0x44
 800202e:	4b54      	ldr	r3, [pc, #336]	; (8002180 <HAL_GPIO_Init+0x2e8>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800203a:	4a52      	ldr	r2, [pc, #328]	; (8002184 <HAL_GPIO_Init+0x2ec>)
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	089b      	lsrs	r3, r3, #2
 8002040:	3302      	adds	r3, #2
 8002042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	220f      	movs	r2, #15
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4013      	ands	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a49      	ldr	r2, [pc, #292]	; (8002188 <HAL_GPIO_Init+0x2f0>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d019      	beq.n	800209a <HAL_GPIO_Init+0x202>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a48      	ldr	r2, [pc, #288]	; (800218c <HAL_GPIO_Init+0x2f4>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d013      	beq.n	8002096 <HAL_GPIO_Init+0x1fe>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a47      	ldr	r2, [pc, #284]	; (8002190 <HAL_GPIO_Init+0x2f8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d00d      	beq.n	8002092 <HAL_GPIO_Init+0x1fa>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a46      	ldr	r2, [pc, #280]	; (8002194 <HAL_GPIO_Init+0x2fc>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d007      	beq.n	800208e <HAL_GPIO_Init+0x1f6>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a45      	ldr	r2, [pc, #276]	; (8002198 <HAL_GPIO_Init+0x300>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d101      	bne.n	800208a <HAL_GPIO_Init+0x1f2>
 8002086:	2304      	movs	r3, #4
 8002088:	e008      	b.n	800209c <HAL_GPIO_Init+0x204>
 800208a:	2307      	movs	r3, #7
 800208c:	e006      	b.n	800209c <HAL_GPIO_Init+0x204>
 800208e:	2303      	movs	r3, #3
 8002090:	e004      	b.n	800209c <HAL_GPIO_Init+0x204>
 8002092:	2302      	movs	r3, #2
 8002094:	e002      	b.n	800209c <HAL_GPIO_Init+0x204>
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <HAL_GPIO_Init+0x204>
 800209a:	2300      	movs	r3, #0
 800209c:	69fa      	ldr	r2, [r7, #28]
 800209e:	f002 0203 	and.w	r2, r2, #3
 80020a2:	0092      	lsls	r2, r2, #2
 80020a4:	4093      	lsls	r3, r2
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020ac:	4935      	ldr	r1, [pc, #212]	; (8002184 <HAL_GPIO_Init+0x2ec>)
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	089b      	lsrs	r3, r3, #2
 80020b2:	3302      	adds	r3, #2
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ba:	4b38      	ldr	r3, [pc, #224]	; (800219c <HAL_GPIO_Init+0x304>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020de:	4a2f      	ldr	r2, [pc, #188]	; (800219c <HAL_GPIO_Init+0x304>)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020e4:	4b2d      	ldr	r3, [pc, #180]	; (800219c <HAL_GPIO_Init+0x304>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002108:	4a24      	ldr	r2, [pc, #144]	; (800219c <HAL_GPIO_Init+0x304>)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800210e:	4b23      	ldr	r3, [pc, #140]	; (800219c <HAL_GPIO_Init+0x304>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002132:	4a1a      	ldr	r2, [pc, #104]	; (800219c <HAL_GPIO_Init+0x304>)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002138:	4b18      	ldr	r3, [pc, #96]	; (800219c <HAL_GPIO_Init+0x304>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800215c:	4a0f      	ldr	r2, [pc, #60]	; (800219c <HAL_GPIO_Init+0x304>)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3301      	adds	r3, #1
 8002166:	61fb      	str	r3, [r7, #28]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	2b0f      	cmp	r3, #15
 800216c:	f67f aea2 	bls.w	8001eb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002170:	bf00      	nop
 8002172:	bf00      	nop
 8002174:	3724      	adds	r7, #36	; 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40023800 	.word	0x40023800
 8002184:	40013800 	.word	0x40013800
 8002188:	40020000 	.word	0x40020000
 800218c:	40020400 	.word	0x40020400
 8002190:	40020800 	.word	0x40020800
 8002194:	40020c00 	.word	0x40020c00
 8002198:	40021000 	.word	0x40021000
 800219c:	40013c00 	.word	0x40013c00

080021a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021a4:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	2000001c 	.word	0x2000001c

080021b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021bc:	f7ff fff0 	bl	80021a0 <HAL_RCC_GetHCLKFreq>
 80021c0:	4602      	mov	r2, r0
 80021c2:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	0a9b      	lsrs	r3, r3, #10
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	4903      	ldr	r1, [pc, #12]	; (80021dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ce:	5ccb      	ldrb	r3, [r1, r3]
 80021d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40023800 	.word	0x40023800
 80021dc:	08004184 	.word	0x08004184

080021e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021e4:	f7ff ffdc 	bl	80021a0 <HAL_RCC_GetHCLKFreq>
 80021e8:	4602      	mov	r2, r0
 80021ea:	4b05      	ldr	r3, [pc, #20]	; (8002200 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	0b5b      	lsrs	r3, r3, #13
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	4903      	ldr	r1, [pc, #12]	; (8002204 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021f6:	5ccb      	ldrb	r3, [r1, r3]
 80021f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40023800 	.word	0x40023800
 8002204:	08004184 	.word	0x08004184

08002208 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e041      	b.n	800229e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d106      	bne.n	8002234 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7ff f9ee 	bl	8001610 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2202      	movs	r2, #2
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3304      	adds	r3, #4
 8002244:	4619      	mov	r1, r3
 8002246:	4610      	mov	r0, r2
 8002248:	f000 fc34 	bl	8002ab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e041      	b.n	800233c <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d106      	bne.n	80022d2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 f839 	bl	8002344 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2202      	movs	r2, #2
 80022d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	3304      	adds	r3, #4
 80022e2:	4619      	mov	r1, r3
 80022e4:	4610      	mov	r0, r2
 80022e6:	f000 fbe5 	bl	8002ab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d104      	bne.n	8002376 <HAL_TIM_IC_Start_IT+0x1e>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002372:	b2db      	uxtb	r3, r3
 8002374:	e013      	b.n	800239e <HAL_TIM_IC_Start_IT+0x46>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	2b04      	cmp	r3, #4
 800237a:	d104      	bne.n	8002386 <HAL_TIM_IC_Start_IT+0x2e>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002382:	b2db      	uxtb	r3, r3
 8002384:	e00b      	b.n	800239e <HAL_TIM_IC_Start_IT+0x46>
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	2b08      	cmp	r3, #8
 800238a:	d104      	bne.n	8002396 <HAL_TIM_IC_Start_IT+0x3e>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002392:	b2db      	uxtb	r3, r3
 8002394:	e003      	b.n	800239e <HAL_TIM_IC_Start_IT+0x46>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800239c:	b2db      	uxtb	r3, r3
 800239e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d104      	bne.n	80023b0 <HAL_TIM_IC_Start_IT+0x58>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	e013      	b.n	80023d8 <HAL_TIM_IC_Start_IT+0x80>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d104      	bne.n	80023c0 <HAL_TIM_IC_Start_IT+0x68>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	e00b      	b.n	80023d8 <HAL_TIM_IC_Start_IT+0x80>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	d104      	bne.n	80023d0 <HAL_TIM_IC_Start_IT+0x78>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	e003      	b.n	80023d8 <HAL_TIM_IC_Start_IT+0x80>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80023da:	7bbb      	ldrb	r3, [r7, #14]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d102      	bne.n	80023e6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80023e0:	7b7b      	ldrb	r3, [r7, #13]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d001      	beq.n	80023ea <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e0c2      	b.n	8002570 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d104      	bne.n	80023fa <HAL_TIM_IC_Start_IT+0xa2>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2202      	movs	r2, #2
 80023f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023f8:	e013      	b.n	8002422 <HAL_TIM_IC_Start_IT+0xca>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d104      	bne.n	800240a <HAL_TIM_IC_Start_IT+0xb2>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2202      	movs	r2, #2
 8002404:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002408:	e00b      	b.n	8002422 <HAL_TIM_IC_Start_IT+0xca>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	2b08      	cmp	r3, #8
 800240e:	d104      	bne.n	800241a <HAL_TIM_IC_Start_IT+0xc2>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2202      	movs	r2, #2
 8002414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002418:	e003      	b.n	8002422 <HAL_TIM_IC_Start_IT+0xca>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2202      	movs	r2, #2
 800241e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d104      	bne.n	8002432 <HAL_TIM_IC_Start_IT+0xda>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2202      	movs	r2, #2
 800242c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002430:	e013      	b.n	800245a <HAL_TIM_IC_Start_IT+0x102>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	2b04      	cmp	r3, #4
 8002436:	d104      	bne.n	8002442 <HAL_TIM_IC_Start_IT+0xea>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2202      	movs	r2, #2
 800243c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002440:	e00b      	b.n	800245a <HAL_TIM_IC_Start_IT+0x102>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b08      	cmp	r3, #8
 8002446:	d104      	bne.n	8002452 <HAL_TIM_IC_Start_IT+0xfa>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002450:	e003      	b.n	800245a <HAL_TIM_IC_Start_IT+0x102>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2202      	movs	r2, #2
 8002456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	2b0c      	cmp	r3, #12
 800245e:	d841      	bhi.n	80024e4 <HAL_TIM_IC_Start_IT+0x18c>
 8002460:	a201      	add	r2, pc, #4	; (adr r2, 8002468 <HAL_TIM_IC_Start_IT+0x110>)
 8002462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002466:	bf00      	nop
 8002468:	0800249d 	.word	0x0800249d
 800246c:	080024e5 	.word	0x080024e5
 8002470:	080024e5 	.word	0x080024e5
 8002474:	080024e5 	.word	0x080024e5
 8002478:	080024af 	.word	0x080024af
 800247c:	080024e5 	.word	0x080024e5
 8002480:	080024e5 	.word	0x080024e5
 8002484:	080024e5 	.word	0x080024e5
 8002488:	080024c1 	.word	0x080024c1
 800248c:	080024e5 	.word	0x080024e5
 8002490:	080024e5 	.word	0x080024e5
 8002494:	080024e5 	.word	0x080024e5
 8002498:	080024d3 	.word	0x080024d3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0202 	orr.w	r2, r2, #2
 80024aa:	60da      	str	r2, [r3, #12]
      break;
 80024ac:	e01d      	b.n	80024ea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 0204 	orr.w	r2, r2, #4
 80024bc:	60da      	str	r2, [r3, #12]
      break;
 80024be:	e014      	b.n	80024ea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0208 	orr.w	r2, r2, #8
 80024ce:	60da      	str	r2, [r3, #12]
      break;
 80024d0:	e00b      	b.n	80024ea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68da      	ldr	r2, [r3, #12]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f042 0210 	orr.w	r2, r2, #16
 80024e0:	60da      	str	r2, [r3, #12]
      break;
 80024e2:	e002      	b.n	80024ea <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	73fb      	strb	r3, [r7, #15]
      break;
 80024e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d13e      	bne.n	800256e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2201      	movs	r2, #1
 80024f6:	6839      	ldr	r1, [r7, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f000 fd13 	bl	8002f24 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a1d      	ldr	r2, [pc, #116]	; (8002578 <HAL_TIM_IC_Start_IT+0x220>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d018      	beq.n	800253a <HAL_TIM_IC_Start_IT+0x1e2>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002510:	d013      	beq.n	800253a <HAL_TIM_IC_Start_IT+0x1e2>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a19      	ldr	r2, [pc, #100]	; (800257c <HAL_TIM_IC_Start_IT+0x224>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d00e      	beq.n	800253a <HAL_TIM_IC_Start_IT+0x1e2>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a17      	ldr	r2, [pc, #92]	; (8002580 <HAL_TIM_IC_Start_IT+0x228>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d009      	beq.n	800253a <HAL_TIM_IC_Start_IT+0x1e2>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a16      	ldr	r2, [pc, #88]	; (8002584 <HAL_TIM_IC_Start_IT+0x22c>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d004      	beq.n	800253a <HAL_TIM_IC_Start_IT+0x1e2>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a14      	ldr	r2, [pc, #80]	; (8002588 <HAL_TIM_IC_Start_IT+0x230>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d111      	bne.n	800255e <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b06      	cmp	r3, #6
 800254a:	d010      	beq.n	800256e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0201 	orr.w	r2, r2, #1
 800255a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800255c:	e007      	b.n	800256e <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 0201 	orr.w	r2, r2, #1
 800256c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800256e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40010000 	.word	0x40010000
 800257c:	40000400 	.word	0x40000400
 8002580:	40000800 	.word	0x40000800
 8002584:	40000c00 	.word	0x40000c00
 8002588:	40014000 	.word	0x40014000

0800258c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d122      	bne.n	80025e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d11b      	bne.n	80025e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f06f 0202 	mvn.w	r2, #2
 80025b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7fe fd02 	bl	8000fd8 <HAL_TIM_IC_CaptureCallback>
 80025d4:	e005      	b.n	80025e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 fa4d 	bl	8002a76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 fa54 	bl	8002a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d122      	bne.n	800263c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b04      	cmp	r3, #4
 8002602:	d11b      	bne.n	800263c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f06f 0204 	mvn.w	r2, #4
 800260c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2202      	movs	r2, #2
 8002612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7fe fcd8 	bl	8000fd8 <HAL_TIM_IC_CaptureCallback>
 8002628:	e005      	b.n	8002636 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 fa23 	bl	8002a76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 fa2a 	bl	8002a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b08      	cmp	r3, #8
 8002648:	d122      	bne.n	8002690 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b08      	cmp	r3, #8
 8002656:	d11b      	bne.n	8002690 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f06f 0208 	mvn.w	r2, #8
 8002660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2204      	movs	r2, #4
 8002666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7fe fcae 	bl	8000fd8 <HAL_TIM_IC_CaptureCallback>
 800267c:	e005      	b.n	800268a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f9f9 	bl	8002a76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 fa00 	bl	8002a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	f003 0310 	and.w	r3, r3, #16
 800269a:	2b10      	cmp	r3, #16
 800269c:	d122      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f003 0310 	and.w	r3, r3, #16
 80026a8:	2b10      	cmp	r3, #16
 80026aa:	d11b      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f06f 0210 	mvn.w	r2, #16
 80026b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2208      	movs	r2, #8
 80026ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7fe fc84 	bl	8000fd8 <HAL_TIM_IC_CaptureCallback>
 80026d0:	e005      	b.n	80026de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f9cf 	bl	8002a76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f9d6 	bl	8002a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d10e      	bne.n	8002710 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d107      	bne.n	8002710 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f06f 0201 	mvn.w	r2, #1
 8002708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f9a9 	bl	8002a62 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271a:	2b80      	cmp	r3, #128	; 0x80
 800271c:	d10e      	bne.n	800273c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002728:	2b80      	cmp	r3, #128	; 0x80
 800272a:	d107      	bne.n	800273c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 fc92 	bl	8003060 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002746:	2b40      	cmp	r3, #64	; 0x40
 8002748:	d10e      	bne.n	8002768 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002754:	2b40      	cmp	r3, #64	; 0x40
 8002756:	d107      	bne.n	8002768 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f99b 	bl	8002a9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	f003 0320 	and.w	r3, r3, #32
 8002772:	2b20      	cmp	r3, #32
 8002774:	d10e      	bne.n	8002794 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f003 0320 	and.w	r3, r3, #32
 8002780:	2b20      	cmp	r3, #32
 8002782:	d107      	bne.n	8002794 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f06f 0220 	mvn.w	r2, #32
 800278c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 fc5c 	bl	800304c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027a8:	2300      	movs	r3, #0
 80027aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d101      	bne.n	80027ba <HAL_TIM_IC_ConfigChannel+0x1e>
 80027b6:	2302      	movs	r3, #2
 80027b8:	e088      	b.n	80028cc <HAL_TIM_IC_ConfigChannel+0x130>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d11b      	bne.n	8002800 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	6819      	ldr	r1, [r3, #0]
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f000 f9ec 	bl	8002bb4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699a      	ldr	r2, [r3, #24]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 020c 	bic.w	r2, r2, #12
 80027ea:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6999      	ldr	r1, [r3, #24]
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	619a      	str	r2, [r3, #24]
 80027fe:	e060      	b.n	80028c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b04      	cmp	r3, #4
 8002804:	d11c      	bne.n	8002840 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6818      	ldr	r0, [r3, #0]
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	6819      	ldr	r1, [r3, #0]
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f000 fa64 	bl	8002ce2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	699a      	ldr	r2, [r3, #24]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002828:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6999      	ldr	r1, [r3, #24]
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	021a      	lsls	r2, r3, #8
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	619a      	str	r2, [r3, #24]
 800283e:	e040      	b.n	80028c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b08      	cmp	r3, #8
 8002844:	d11b      	bne.n	800287e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6818      	ldr	r0, [r3, #0]
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	6819      	ldr	r1, [r3, #0]
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	f000 fab1 	bl	8002dbc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	69da      	ldr	r2, [r3, #28]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 020c 	bic.w	r2, r2, #12
 8002868:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	69d9      	ldr	r1, [r3, #28]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	61da      	str	r2, [r3, #28]
 800287c:	e021      	b.n	80028c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b0c      	cmp	r3, #12
 8002882:	d11c      	bne.n	80028be <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6818      	ldr	r0, [r3, #0]
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	6819      	ldr	r1, [r3, #0]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	f000 face 	bl	8002e34 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	69da      	ldr	r2, [r3, #28]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80028a6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	69d9      	ldr	r1, [r3, #28]
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	021a      	lsls	r2, r3, #8
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	61da      	str	r2, [r3, #28]
 80028bc:	e001      	b.n	80028c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d101      	bne.n	80028f0 <HAL_TIM_ConfigClockSource+0x1c>
 80028ec:	2302      	movs	r3, #2
 80028ee:	e0b4      	b.n	8002a5a <HAL_TIM_ConfigClockSource+0x186>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2202      	movs	r2, #2
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800290e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002916:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002928:	d03e      	beq.n	80029a8 <HAL_TIM_ConfigClockSource+0xd4>
 800292a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800292e:	f200 8087 	bhi.w	8002a40 <HAL_TIM_ConfigClockSource+0x16c>
 8002932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002936:	f000 8086 	beq.w	8002a46 <HAL_TIM_ConfigClockSource+0x172>
 800293a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800293e:	d87f      	bhi.n	8002a40 <HAL_TIM_ConfigClockSource+0x16c>
 8002940:	2b70      	cmp	r3, #112	; 0x70
 8002942:	d01a      	beq.n	800297a <HAL_TIM_ConfigClockSource+0xa6>
 8002944:	2b70      	cmp	r3, #112	; 0x70
 8002946:	d87b      	bhi.n	8002a40 <HAL_TIM_ConfigClockSource+0x16c>
 8002948:	2b60      	cmp	r3, #96	; 0x60
 800294a:	d050      	beq.n	80029ee <HAL_TIM_ConfigClockSource+0x11a>
 800294c:	2b60      	cmp	r3, #96	; 0x60
 800294e:	d877      	bhi.n	8002a40 <HAL_TIM_ConfigClockSource+0x16c>
 8002950:	2b50      	cmp	r3, #80	; 0x50
 8002952:	d03c      	beq.n	80029ce <HAL_TIM_ConfigClockSource+0xfa>
 8002954:	2b50      	cmp	r3, #80	; 0x50
 8002956:	d873      	bhi.n	8002a40 <HAL_TIM_ConfigClockSource+0x16c>
 8002958:	2b40      	cmp	r3, #64	; 0x40
 800295a:	d058      	beq.n	8002a0e <HAL_TIM_ConfigClockSource+0x13a>
 800295c:	2b40      	cmp	r3, #64	; 0x40
 800295e:	d86f      	bhi.n	8002a40 <HAL_TIM_ConfigClockSource+0x16c>
 8002960:	2b30      	cmp	r3, #48	; 0x30
 8002962:	d064      	beq.n	8002a2e <HAL_TIM_ConfigClockSource+0x15a>
 8002964:	2b30      	cmp	r3, #48	; 0x30
 8002966:	d86b      	bhi.n	8002a40 <HAL_TIM_ConfigClockSource+0x16c>
 8002968:	2b20      	cmp	r3, #32
 800296a:	d060      	beq.n	8002a2e <HAL_TIM_ConfigClockSource+0x15a>
 800296c:	2b20      	cmp	r3, #32
 800296e:	d867      	bhi.n	8002a40 <HAL_TIM_ConfigClockSource+0x16c>
 8002970:	2b00      	cmp	r3, #0
 8002972:	d05c      	beq.n	8002a2e <HAL_TIM_ConfigClockSource+0x15a>
 8002974:	2b10      	cmp	r3, #16
 8002976:	d05a      	beq.n	8002a2e <HAL_TIM_ConfigClockSource+0x15a>
 8002978:	e062      	b.n	8002a40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6818      	ldr	r0, [r3, #0]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	6899      	ldr	r1, [r3, #8]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f000 faab 	bl	8002ee4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800299c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	609a      	str	r2, [r3, #8]
      break;
 80029a6:	e04f      	b.n	8002a48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6818      	ldr	r0, [r3, #0]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	6899      	ldr	r1, [r3, #8]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f000 fa94 	bl	8002ee4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029ca:	609a      	str	r2, [r3, #8]
      break;
 80029cc:	e03c      	b.n	8002a48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6818      	ldr	r0, [r3, #0]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	6859      	ldr	r1, [r3, #4]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	461a      	mov	r2, r3
 80029dc:	f000 f952 	bl	8002c84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2150      	movs	r1, #80	; 0x50
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 fa61 	bl	8002eae <TIM_ITRx_SetConfig>
      break;
 80029ec:	e02c      	b.n	8002a48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	6859      	ldr	r1, [r3, #4]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	461a      	mov	r2, r3
 80029fc:	f000 f9ae 	bl	8002d5c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2160      	movs	r1, #96	; 0x60
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 fa51 	bl	8002eae <TIM_ITRx_SetConfig>
      break;
 8002a0c:	e01c      	b.n	8002a48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6818      	ldr	r0, [r3, #0]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	6859      	ldr	r1, [r3, #4]
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	f000 f932 	bl	8002c84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2140      	movs	r1, #64	; 0x40
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 fa41 	bl	8002eae <TIM_ITRx_SetConfig>
      break;
 8002a2c:	e00c      	b.n	8002a48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4619      	mov	r1, r3
 8002a38:	4610      	mov	r0, r2
 8002a3a:	f000 fa38 	bl	8002eae <TIM_ITRx_SetConfig>
      break;
 8002a3e:	e003      	b.n	8002a48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	73fb      	strb	r3, [r7, #15]
      break;
 8002a44:	e000      	b.n	8002a48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
	...

08002ab4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a34      	ldr	r2, [pc, #208]	; (8002b98 <TIM_Base_SetConfig+0xe4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d00f      	beq.n	8002aec <TIM_Base_SetConfig+0x38>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad2:	d00b      	beq.n	8002aec <TIM_Base_SetConfig+0x38>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a31      	ldr	r2, [pc, #196]	; (8002b9c <TIM_Base_SetConfig+0xe8>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d007      	beq.n	8002aec <TIM_Base_SetConfig+0x38>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a30      	ldr	r2, [pc, #192]	; (8002ba0 <TIM_Base_SetConfig+0xec>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d003      	beq.n	8002aec <TIM_Base_SetConfig+0x38>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a2f      	ldr	r2, [pc, #188]	; (8002ba4 <TIM_Base_SetConfig+0xf0>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d108      	bne.n	8002afe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a25      	ldr	r2, [pc, #148]	; (8002b98 <TIM_Base_SetConfig+0xe4>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d01b      	beq.n	8002b3e <TIM_Base_SetConfig+0x8a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b0c:	d017      	beq.n	8002b3e <TIM_Base_SetConfig+0x8a>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a22      	ldr	r2, [pc, #136]	; (8002b9c <TIM_Base_SetConfig+0xe8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d013      	beq.n	8002b3e <TIM_Base_SetConfig+0x8a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a21      	ldr	r2, [pc, #132]	; (8002ba0 <TIM_Base_SetConfig+0xec>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d00f      	beq.n	8002b3e <TIM_Base_SetConfig+0x8a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a20      	ldr	r2, [pc, #128]	; (8002ba4 <TIM_Base_SetConfig+0xf0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d00b      	beq.n	8002b3e <TIM_Base_SetConfig+0x8a>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a1f      	ldr	r2, [pc, #124]	; (8002ba8 <TIM_Base_SetConfig+0xf4>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d007      	beq.n	8002b3e <TIM_Base_SetConfig+0x8a>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a1e      	ldr	r2, [pc, #120]	; (8002bac <TIM_Base_SetConfig+0xf8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d003      	beq.n	8002b3e <TIM_Base_SetConfig+0x8a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a1d      	ldr	r2, [pc, #116]	; (8002bb0 <TIM_Base_SetConfig+0xfc>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d108      	bne.n	8002b50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a08      	ldr	r2, [pc, #32]	; (8002b98 <TIM_Base_SetConfig+0xe4>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d103      	bne.n	8002b84 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	691a      	ldr	r2, [r3, #16]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	615a      	str	r2, [r3, #20]
}
 8002b8a:	bf00      	nop
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40010000 	.word	0x40010000
 8002b9c:	40000400 	.word	0x40000400
 8002ba0:	40000800 	.word	0x40000800
 8002ba4:	40000c00 	.word	0x40000c00
 8002ba8:	40014000 	.word	0x40014000
 8002bac:	40014400 	.word	0x40014400
 8002bb0:	40014800 	.word	0x40014800

08002bb4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b087      	sub	sp, #28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
 8002bc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	f023 0201 	bic.w	r2, r3, #1
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4a24      	ldr	r2, [pc, #144]	; (8002c70 <TIM_TI1_SetConfig+0xbc>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d013      	beq.n	8002c0a <TIM_TI1_SetConfig+0x56>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be8:	d00f      	beq.n	8002c0a <TIM_TI1_SetConfig+0x56>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	4a21      	ldr	r2, [pc, #132]	; (8002c74 <TIM_TI1_SetConfig+0xc0>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d00b      	beq.n	8002c0a <TIM_TI1_SetConfig+0x56>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	4a20      	ldr	r2, [pc, #128]	; (8002c78 <TIM_TI1_SetConfig+0xc4>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d007      	beq.n	8002c0a <TIM_TI1_SetConfig+0x56>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4a1f      	ldr	r2, [pc, #124]	; (8002c7c <TIM_TI1_SetConfig+0xc8>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d003      	beq.n	8002c0a <TIM_TI1_SetConfig+0x56>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	4a1e      	ldr	r2, [pc, #120]	; (8002c80 <TIM_TI1_SetConfig+0xcc>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d101      	bne.n	8002c0e <TIM_TI1_SetConfig+0x5a>
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e000      	b.n	8002c10 <TIM_TI1_SetConfig+0x5c>
 8002c0e:	2300      	movs	r3, #0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d008      	beq.n	8002c26 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f023 0303 	bic.w	r3, r3, #3
 8002c1a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	e003      	b.n	8002c2e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	f023 030a 	bic.w	r3, r3, #10
 8002c48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	f003 030a 	and.w	r3, r3, #10
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	621a      	str	r2, [r3, #32]
}
 8002c62:	bf00      	nop
 8002c64:	371c      	adds	r7, #28
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40010000 	.word	0x40010000
 8002c74:	40000400 	.word	0x40000400
 8002c78:	40000800 	.word	0x40000800
 8002c7c:	40000c00 	.word	0x40000c00
 8002c80:	40014000 	.word	0x40014000

08002c84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	f023 0201 	bic.w	r2, r3, #1
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f023 030a 	bic.w	r3, r3, #10
 8002cc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	621a      	str	r2, [r3, #32]
}
 8002cd6:	bf00      	nop
 8002cd8:	371c      	adds	r7, #28
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b087      	sub	sp, #28
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	607a      	str	r2, [r7, #4]
 8002cee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	f023 0210 	bic.w	r2, r3, #16
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d0e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	021b      	lsls	r3, r3, #8
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	031b      	lsls	r3, r3, #12
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d34:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	621a      	str	r2, [r3, #32]
}
 8002d50:	bf00      	nop
 8002d52:	371c      	adds	r7, #28
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b087      	sub	sp, #28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	f023 0210 	bic.w	r2, r3, #16
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	031b      	lsls	r3, r3, #12
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	621a      	str	r2, [r3, #32]
}
 8002db0:	bf00      	nop
 8002db2:	371c      	adds	r7, #28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
 8002dc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f023 0303 	bic.w	r3, r3, #3
 8002de8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002df8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	011b      	lsls	r3, r3, #4
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002e0c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	021b      	lsls	r3, r3, #8
 8002e12:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	621a      	str	r2, [r3, #32]
}
 8002e28:	bf00      	nop
 8002e2a:	371c      	adds	r7, #28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
 8002e40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	021b      	lsls	r3, r3, #8
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e72:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	031b      	lsls	r3, r3, #12
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002e86:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	031b      	lsls	r3, r3, #12
 8002e8c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	621a      	str	r2, [r3, #32]
}
 8002ea2:	bf00      	nop
 8002ea4:	371c      	adds	r7, #28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b085      	sub	sp, #20
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
 8002eb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f043 0307 	orr.w	r3, r3, #7
 8002ed0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	609a      	str	r2, [r3, #8]
}
 8002ed8:	bf00      	nop
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
 8002ef0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002efe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	021a      	lsls	r2, r3, #8
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	431a      	orrs	r2, r3
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	609a      	str	r2, [r3, #8]
}
 8002f18:	bf00      	nop
 8002f1a:	371c      	adds	r7, #28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b087      	sub	sp, #28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	f003 031f 	and.w	r3, r3, #31
 8002f36:	2201      	movs	r2, #1
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6a1a      	ldr	r2, [r3, #32]
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	43db      	mvns	r3, r3
 8002f46:	401a      	ands	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6a1a      	ldr	r2, [r3, #32]
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f003 031f 	and.w	r3, r3, #31
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	621a      	str	r2, [r3, #32]
}
 8002f62:	bf00      	nop
 8002f64:	371c      	adds	r7, #28
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
	...

08002f70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d101      	bne.n	8002f88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f84:	2302      	movs	r3, #2
 8002f86:	e050      	b.n	800302a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a1c      	ldr	r2, [pc, #112]	; (8003038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d018      	beq.n	8002ffe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd4:	d013      	beq.n	8002ffe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a18      	ldr	r2, [pc, #96]	; (800303c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d00e      	beq.n	8002ffe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a16      	ldr	r2, [pc, #88]	; (8003040 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d009      	beq.n	8002ffe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a15      	ldr	r2, [pc, #84]	; (8003044 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d004      	beq.n	8002ffe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a13      	ldr	r2, [pc, #76]	; (8003048 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d10c      	bne.n	8003018 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003004:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	4313      	orrs	r3, r2
 800300e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	40010000 	.word	0x40010000
 800303c:	40000400 	.word	0x40000400
 8003040:	40000800 	.word	0x40000800
 8003044:	40000c00 	.word	0x40000c00
 8003048:	40014000 	.word	0x40014000

0800304c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e03f      	b.n	8003106 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d106      	bne.n	80030a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7fe fb08 	bl	80016b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2224      	movs	r2, #36	; 0x24
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f86d 	bl	8003198 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695a      	ldr	r2, [r3, #20]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2220      	movs	r2, #32
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2220      	movs	r2, #32
 8003100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800310e:	b480      	push	{r7}
 8003110:	b085      	sub	sp, #20
 8003112:	af00      	add	r7, sp, #0
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	4613      	mov	r3, r2
 800311a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b20      	cmp	r3, #32
 8003126:	d130      	bne.n	800318a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d002      	beq.n	8003134 <HAL_UART_Transmit_IT+0x26>
 800312e:	88fb      	ldrh	r3, [r7, #6]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e029      	b.n	800318c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <HAL_UART_Transmit_IT+0x38>
 8003142:	2302      	movs	r3, #2
 8003144:	e022      	b.n	800318c <HAL_UART_Transmit_IT+0x7e>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	88fa      	ldrh	r2, [r7, #6]
 8003158:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	88fa      	ldrh	r2, [r7, #6]
 800315e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2221      	movs	r2, #33	; 0x21
 800316a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003184:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003186:	2300      	movs	r3, #0
 8003188:	e000      	b.n	800318c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800318a:	2302      	movs	r3, #2
  }
}
 800318c:	4618      	mov	r0, r3
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800319c:	b0c0      	sub	sp, #256	; 0x100
 800319e:	af00      	add	r7, sp, #0
 80031a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b4:	68d9      	ldr	r1, [r3, #12]
 80031b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	ea40 0301 	orr.w	r3, r0, r1
 80031c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	431a      	orrs	r2, r3
 80031d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	431a      	orrs	r2, r3
 80031d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	4313      	orrs	r3, r2
 80031e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80031f0:	f021 010c 	bic.w	r1, r1, #12
 80031f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80031fe:	430b      	orrs	r3, r1
 8003200:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800320e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003212:	6999      	ldr	r1, [r3, #24]
 8003214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	ea40 0301 	orr.w	r3, r0, r1
 800321e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	4b8f      	ldr	r3, [pc, #572]	; (8003464 <UART_SetConfig+0x2cc>)
 8003228:	429a      	cmp	r2, r3
 800322a:	d005      	beq.n	8003238 <UART_SetConfig+0xa0>
 800322c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	4b8d      	ldr	r3, [pc, #564]	; (8003468 <UART_SetConfig+0x2d0>)
 8003234:	429a      	cmp	r2, r3
 8003236:	d104      	bne.n	8003242 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003238:	f7fe ffd2 	bl	80021e0 <HAL_RCC_GetPCLK2Freq>
 800323c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003240:	e003      	b.n	800324a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003242:	f7fe ffb9 	bl	80021b8 <HAL_RCC_GetPCLK1Freq>
 8003246:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800324a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800324e:	69db      	ldr	r3, [r3, #28]
 8003250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003254:	f040 810c 	bne.w	8003470 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003258:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800325c:	2200      	movs	r2, #0
 800325e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003262:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003266:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800326a:	4622      	mov	r2, r4
 800326c:	462b      	mov	r3, r5
 800326e:	1891      	adds	r1, r2, r2
 8003270:	65b9      	str	r1, [r7, #88]	; 0x58
 8003272:	415b      	adcs	r3, r3
 8003274:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003276:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800327a:	4621      	mov	r1, r4
 800327c:	eb12 0801 	adds.w	r8, r2, r1
 8003280:	4629      	mov	r1, r5
 8003282:	eb43 0901 	adc.w	r9, r3, r1
 8003286:	f04f 0200 	mov.w	r2, #0
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003292:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003296:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800329a:	4690      	mov	r8, r2
 800329c:	4699      	mov	r9, r3
 800329e:	4623      	mov	r3, r4
 80032a0:	eb18 0303 	adds.w	r3, r8, r3
 80032a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80032a8:	462b      	mov	r3, r5
 80032aa:	eb49 0303 	adc.w	r3, r9, r3
 80032ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80032b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80032be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80032c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80032c6:	460b      	mov	r3, r1
 80032c8:	18db      	adds	r3, r3, r3
 80032ca:	653b      	str	r3, [r7, #80]	; 0x50
 80032cc:	4613      	mov	r3, r2
 80032ce:	eb42 0303 	adc.w	r3, r2, r3
 80032d2:	657b      	str	r3, [r7, #84]	; 0x54
 80032d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80032d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80032dc:	f7fd f9c0 	bl	8000660 <__aeabi_uldivmod>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4b61      	ldr	r3, [pc, #388]	; (800346c <UART_SetConfig+0x2d4>)
 80032e6:	fba3 2302 	umull	r2, r3, r3, r2
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	011c      	lsls	r4, r3, #4
 80032ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032f2:	2200      	movs	r2, #0
 80032f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80032fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003300:	4642      	mov	r2, r8
 8003302:	464b      	mov	r3, r9
 8003304:	1891      	adds	r1, r2, r2
 8003306:	64b9      	str	r1, [r7, #72]	; 0x48
 8003308:	415b      	adcs	r3, r3
 800330a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800330c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003310:	4641      	mov	r1, r8
 8003312:	eb12 0a01 	adds.w	sl, r2, r1
 8003316:	4649      	mov	r1, r9
 8003318:	eb43 0b01 	adc.w	fp, r3, r1
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	f04f 0300 	mov.w	r3, #0
 8003324:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003328:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800332c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003330:	4692      	mov	sl, r2
 8003332:	469b      	mov	fp, r3
 8003334:	4643      	mov	r3, r8
 8003336:	eb1a 0303 	adds.w	r3, sl, r3
 800333a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800333e:	464b      	mov	r3, r9
 8003340:	eb4b 0303 	adc.w	r3, fp, r3
 8003344:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003354:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003358:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800335c:	460b      	mov	r3, r1
 800335e:	18db      	adds	r3, r3, r3
 8003360:	643b      	str	r3, [r7, #64]	; 0x40
 8003362:	4613      	mov	r3, r2
 8003364:	eb42 0303 	adc.w	r3, r2, r3
 8003368:	647b      	str	r3, [r7, #68]	; 0x44
 800336a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800336e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003372:	f7fd f975 	bl	8000660 <__aeabi_uldivmod>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	4611      	mov	r1, r2
 800337c:	4b3b      	ldr	r3, [pc, #236]	; (800346c <UART_SetConfig+0x2d4>)
 800337e:	fba3 2301 	umull	r2, r3, r3, r1
 8003382:	095b      	lsrs	r3, r3, #5
 8003384:	2264      	movs	r2, #100	; 0x64
 8003386:	fb02 f303 	mul.w	r3, r2, r3
 800338a:	1acb      	subs	r3, r1, r3
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003392:	4b36      	ldr	r3, [pc, #216]	; (800346c <UART_SetConfig+0x2d4>)
 8003394:	fba3 2302 	umull	r2, r3, r3, r2
 8003398:	095b      	lsrs	r3, r3, #5
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033a0:	441c      	add	r4, r3
 80033a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033a6:	2200      	movs	r2, #0
 80033a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80033b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80033b4:	4642      	mov	r2, r8
 80033b6:	464b      	mov	r3, r9
 80033b8:	1891      	adds	r1, r2, r2
 80033ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80033bc:	415b      	adcs	r3, r3
 80033be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80033c4:	4641      	mov	r1, r8
 80033c6:	1851      	adds	r1, r2, r1
 80033c8:	6339      	str	r1, [r7, #48]	; 0x30
 80033ca:	4649      	mov	r1, r9
 80033cc:	414b      	adcs	r3, r1
 80033ce:	637b      	str	r3, [r7, #52]	; 0x34
 80033d0:	f04f 0200 	mov.w	r2, #0
 80033d4:	f04f 0300 	mov.w	r3, #0
 80033d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80033dc:	4659      	mov	r1, fp
 80033de:	00cb      	lsls	r3, r1, #3
 80033e0:	4651      	mov	r1, sl
 80033e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033e6:	4651      	mov	r1, sl
 80033e8:	00ca      	lsls	r2, r1, #3
 80033ea:	4610      	mov	r0, r2
 80033ec:	4619      	mov	r1, r3
 80033ee:	4603      	mov	r3, r0
 80033f0:	4642      	mov	r2, r8
 80033f2:	189b      	adds	r3, r3, r2
 80033f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033f8:	464b      	mov	r3, r9
 80033fa:	460a      	mov	r2, r1
 80033fc:	eb42 0303 	adc.w	r3, r2, r3
 8003400:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003410:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003414:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003418:	460b      	mov	r3, r1
 800341a:	18db      	adds	r3, r3, r3
 800341c:	62bb      	str	r3, [r7, #40]	; 0x28
 800341e:	4613      	mov	r3, r2
 8003420:	eb42 0303 	adc.w	r3, r2, r3
 8003424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003426:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800342a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800342e:	f7fd f917 	bl	8000660 <__aeabi_uldivmod>
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	4b0d      	ldr	r3, [pc, #52]	; (800346c <UART_SetConfig+0x2d4>)
 8003438:	fba3 1302 	umull	r1, r3, r3, r2
 800343c:	095b      	lsrs	r3, r3, #5
 800343e:	2164      	movs	r1, #100	; 0x64
 8003440:	fb01 f303 	mul.w	r3, r1, r3
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	3332      	adds	r3, #50	; 0x32
 800344a:	4a08      	ldr	r2, [pc, #32]	; (800346c <UART_SetConfig+0x2d4>)
 800344c:	fba2 2303 	umull	r2, r3, r2, r3
 8003450:	095b      	lsrs	r3, r3, #5
 8003452:	f003 0207 	and.w	r2, r3, #7
 8003456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4422      	add	r2, r4
 800345e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003460:	e106      	b.n	8003670 <UART_SetConfig+0x4d8>
 8003462:	bf00      	nop
 8003464:	40011000 	.word	0x40011000
 8003468:	40011400 	.word	0x40011400
 800346c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003470:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003474:	2200      	movs	r2, #0
 8003476:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800347a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800347e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003482:	4642      	mov	r2, r8
 8003484:	464b      	mov	r3, r9
 8003486:	1891      	adds	r1, r2, r2
 8003488:	6239      	str	r1, [r7, #32]
 800348a:	415b      	adcs	r3, r3
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
 800348e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003492:	4641      	mov	r1, r8
 8003494:	1854      	adds	r4, r2, r1
 8003496:	4649      	mov	r1, r9
 8003498:	eb43 0501 	adc.w	r5, r3, r1
 800349c:	f04f 0200 	mov.w	r2, #0
 80034a0:	f04f 0300 	mov.w	r3, #0
 80034a4:	00eb      	lsls	r3, r5, #3
 80034a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034aa:	00e2      	lsls	r2, r4, #3
 80034ac:	4614      	mov	r4, r2
 80034ae:	461d      	mov	r5, r3
 80034b0:	4643      	mov	r3, r8
 80034b2:	18e3      	adds	r3, r4, r3
 80034b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80034b8:	464b      	mov	r3, r9
 80034ba:	eb45 0303 	adc.w	r3, r5, r3
 80034be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80034c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80034ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80034de:	4629      	mov	r1, r5
 80034e0:	008b      	lsls	r3, r1, #2
 80034e2:	4621      	mov	r1, r4
 80034e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034e8:	4621      	mov	r1, r4
 80034ea:	008a      	lsls	r2, r1, #2
 80034ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80034f0:	f7fd f8b6 	bl	8000660 <__aeabi_uldivmod>
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4b60      	ldr	r3, [pc, #384]	; (800367c <UART_SetConfig+0x4e4>)
 80034fa:	fba3 2302 	umull	r2, r3, r3, r2
 80034fe:	095b      	lsrs	r3, r3, #5
 8003500:	011c      	lsls	r4, r3, #4
 8003502:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003506:	2200      	movs	r2, #0
 8003508:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800350c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003510:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003514:	4642      	mov	r2, r8
 8003516:	464b      	mov	r3, r9
 8003518:	1891      	adds	r1, r2, r2
 800351a:	61b9      	str	r1, [r7, #24]
 800351c:	415b      	adcs	r3, r3
 800351e:	61fb      	str	r3, [r7, #28]
 8003520:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003524:	4641      	mov	r1, r8
 8003526:	1851      	adds	r1, r2, r1
 8003528:	6139      	str	r1, [r7, #16]
 800352a:	4649      	mov	r1, r9
 800352c:	414b      	adcs	r3, r1
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	f04f 0300 	mov.w	r3, #0
 8003538:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800353c:	4659      	mov	r1, fp
 800353e:	00cb      	lsls	r3, r1, #3
 8003540:	4651      	mov	r1, sl
 8003542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003546:	4651      	mov	r1, sl
 8003548:	00ca      	lsls	r2, r1, #3
 800354a:	4610      	mov	r0, r2
 800354c:	4619      	mov	r1, r3
 800354e:	4603      	mov	r3, r0
 8003550:	4642      	mov	r2, r8
 8003552:	189b      	adds	r3, r3, r2
 8003554:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003558:	464b      	mov	r3, r9
 800355a:	460a      	mov	r2, r1
 800355c:	eb42 0303 	adc.w	r3, r2, r3
 8003560:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	67bb      	str	r3, [r7, #120]	; 0x78
 800356e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800357c:	4649      	mov	r1, r9
 800357e:	008b      	lsls	r3, r1, #2
 8003580:	4641      	mov	r1, r8
 8003582:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003586:	4641      	mov	r1, r8
 8003588:	008a      	lsls	r2, r1, #2
 800358a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800358e:	f7fd f867 	bl	8000660 <__aeabi_uldivmod>
 8003592:	4602      	mov	r2, r0
 8003594:	460b      	mov	r3, r1
 8003596:	4611      	mov	r1, r2
 8003598:	4b38      	ldr	r3, [pc, #224]	; (800367c <UART_SetConfig+0x4e4>)
 800359a:	fba3 2301 	umull	r2, r3, r3, r1
 800359e:	095b      	lsrs	r3, r3, #5
 80035a0:	2264      	movs	r2, #100	; 0x64
 80035a2:	fb02 f303 	mul.w	r3, r2, r3
 80035a6:	1acb      	subs	r3, r1, r3
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	3332      	adds	r3, #50	; 0x32
 80035ac:	4a33      	ldr	r2, [pc, #204]	; (800367c <UART_SetConfig+0x4e4>)
 80035ae:	fba2 2303 	umull	r2, r3, r2, r3
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035b8:	441c      	add	r4, r3
 80035ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035be:	2200      	movs	r2, #0
 80035c0:	673b      	str	r3, [r7, #112]	; 0x70
 80035c2:	677a      	str	r2, [r7, #116]	; 0x74
 80035c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80035c8:	4642      	mov	r2, r8
 80035ca:	464b      	mov	r3, r9
 80035cc:	1891      	adds	r1, r2, r2
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	415b      	adcs	r3, r3
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035d8:	4641      	mov	r1, r8
 80035da:	1851      	adds	r1, r2, r1
 80035dc:	6039      	str	r1, [r7, #0]
 80035de:	4649      	mov	r1, r9
 80035e0:	414b      	adcs	r3, r1
 80035e2:	607b      	str	r3, [r7, #4]
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035f0:	4659      	mov	r1, fp
 80035f2:	00cb      	lsls	r3, r1, #3
 80035f4:	4651      	mov	r1, sl
 80035f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035fa:	4651      	mov	r1, sl
 80035fc:	00ca      	lsls	r2, r1, #3
 80035fe:	4610      	mov	r0, r2
 8003600:	4619      	mov	r1, r3
 8003602:	4603      	mov	r3, r0
 8003604:	4642      	mov	r2, r8
 8003606:	189b      	adds	r3, r3, r2
 8003608:	66bb      	str	r3, [r7, #104]	; 0x68
 800360a:	464b      	mov	r3, r9
 800360c:	460a      	mov	r2, r1
 800360e:	eb42 0303 	adc.w	r3, r2, r3
 8003612:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	663b      	str	r3, [r7, #96]	; 0x60
 800361e:	667a      	str	r2, [r7, #100]	; 0x64
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800362c:	4649      	mov	r1, r9
 800362e:	008b      	lsls	r3, r1, #2
 8003630:	4641      	mov	r1, r8
 8003632:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003636:	4641      	mov	r1, r8
 8003638:	008a      	lsls	r2, r1, #2
 800363a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800363e:	f7fd f80f 	bl	8000660 <__aeabi_uldivmod>
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	4b0d      	ldr	r3, [pc, #52]	; (800367c <UART_SetConfig+0x4e4>)
 8003648:	fba3 1302 	umull	r1, r3, r3, r2
 800364c:	095b      	lsrs	r3, r3, #5
 800364e:	2164      	movs	r1, #100	; 0x64
 8003650:	fb01 f303 	mul.w	r3, r1, r3
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	3332      	adds	r3, #50	; 0x32
 800365a:	4a08      	ldr	r2, [pc, #32]	; (800367c <UART_SetConfig+0x4e4>)
 800365c:	fba2 2303 	umull	r2, r3, r2, r3
 8003660:	095b      	lsrs	r3, r3, #5
 8003662:	f003 020f 	and.w	r2, r3, #15
 8003666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4422      	add	r2, r4
 800366e:	609a      	str	r2, [r3, #8]
}
 8003670:	bf00      	nop
 8003672:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003676:	46bd      	mov	sp, r7
 8003678:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800367c:	51eb851f 	.word	0x51eb851f

08003680 <LL_ADC_SetCommonClock>:
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_ADCPRE, CommonClock);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	431a      	orrs	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	605a      	str	r2, [r3, #4]
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <LL_ADC_REG_SetSequencerLength>:
{
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
 80036ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <LL_ADC_IsEnabled>:
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b01      	cmp	r3, #1
 80036de:	bf0c      	ite	eq
 80036e0:	2301      	moveq	r3, #1
 80036e2:	2300      	movne	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
	...

080036f4 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80036fe:	2300      	movs	r3, #0
 8003700:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8003702:	480a      	ldr	r0, [pc, #40]	; (800372c <LL_ADC_CommonInit+0x38>)
 8003704:	f7ff ffe2 	bl	80036cc <LL_ADC_IsEnabled>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d106      	bne.n	800371c <LL_ADC_CommonInit+0x28>
                   ADC_CommonInitStruct->CommonClock
                 | LL_ADC_MULTI_INDEPENDENT
                );
    }
#else
    LL_ADC_SetCommonClock(ADCxy_COMMON, ADC_CommonInitStruct->CommonClock);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4619      	mov	r1, r3
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f7ff ffb3 	bl	8003680 <LL_ADC_SetCommonClock>
 800371a:	e001      	b.n	8003720 <LL_ADC_CommonInit+0x2c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8003720:	7bfb      	ldrb	r3, [r7, #15]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40012000 	.word	0x40012000

08003730 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800373a:	2300      	movs	r3, #0
 800373c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff ffc4 	bl	80036cc <LL_ADC_IsEnabled>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d117      	bne.n	800377a <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003752:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	6811      	ldr	r1, [r2, #0]
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	6892      	ldr	r2, [r2, #8]
 800375e:	430a      	orrs	r2, r1
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	609a      	str	r2, [r3, #8]
 8003778:	e001      	b.n	800377e <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800377e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003792:	2300      	movs	r3, #0
 8003794:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7ff ff98 	bl	80036cc <LL_ADC_IsEnabled>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d12b      	bne.n	80037fa <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d009      	beq.n	80037be <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	605a      	str	r2, [r3, #4]
 80037bc:	e005      	b.n	80037ca <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	4b0e      	ldr	r3, [pc, #56]	; (8003808 <LL_ADC_REG_Init+0x80>)
 80037d0:	4013      	ands	r3, r2
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	6812      	ldr	r2, [r2, #0]
 80037d6:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	68d2      	ldr	r2, [r2, #12]
 80037de:	4311      	orrs	r1, r2
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	6912      	ldr	r2, [r2, #16]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	4619      	mov	r1, r3
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7ff ff57 	bl	80036a6 <LL_ADC_REG_SetSequencerLength>
 80037f8:	e001      	b.n	80037fe <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80037fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	c0fffcfd 	.word	0xc0fffcfd

0800380c <LL_GPIO_SetPinMode>:
{
 800380c:	b480      	push	{r7}
 800380e:	b089      	sub	sp, #36	; 0x24
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	fa93 f3a3 	rbit	r3, r3
 8003826:	613b      	str	r3, [r7, #16]
  return result;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	fab3 f383 	clz	r3, r3
 800382e:	b2db      	uxtb	r3, r3
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	2103      	movs	r1, #3
 8003834:	fa01 f303 	lsl.w	r3, r1, r3
 8003838:	43db      	mvns	r3, r3
 800383a:	401a      	ands	r2, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	fa93 f3a3 	rbit	r3, r3
 8003846:	61bb      	str	r3, [r7, #24]
  return result;
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	fab3 f383 	clz	r3, r3
 800384e:	b2db      	uxtb	r3, r3
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	fa01 f303 	lsl.w	r3, r1, r3
 8003858:	431a      	orrs	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	601a      	str	r2, [r3, #0]
}
 800385e:	bf00      	nop
 8003860:	3724      	adds	r7, #36	; 0x24
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <LL_GPIO_SetPinOutputType>:
{
 800386a:	b480      	push	{r7}
 800386c:	b085      	sub	sp, #20
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	43db      	mvns	r3, r3
 800387e:	401a      	ands	r2, r3
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	fb01 f303 	mul.w	r3, r1, r3
 8003888:	431a      	orrs	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	605a      	str	r2, [r3, #4]
}
 800388e:	bf00      	nop
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <LL_GPIO_SetPinSpeed>:
{
 800389a:	b480      	push	{r7}
 800389c:	b089      	sub	sp, #36	; 0x24
 800389e:	af00      	add	r7, sp, #0
 80038a0:	60f8      	str	r0, [r7, #12]
 80038a2:	60b9      	str	r1, [r7, #8]
 80038a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	fa93 f3a3 	rbit	r3, r3
 80038b4:	613b      	str	r3, [r7, #16]
  return result;
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	fab3 f383 	clz	r3, r3
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	2103      	movs	r1, #3
 80038c2:	fa01 f303 	lsl.w	r3, r1, r3
 80038c6:	43db      	mvns	r3, r3
 80038c8:	401a      	ands	r2, r3
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	fa93 f3a3 	rbit	r3, r3
 80038d4:	61bb      	str	r3, [r7, #24]
  return result;
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	fab3 f383 	clz	r3, r3
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	fa01 f303 	lsl.w	r3, r1, r3
 80038e6:	431a      	orrs	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	609a      	str	r2, [r3, #8]
}
 80038ec:	bf00      	nop
 80038ee:	3724      	adds	r7, #36	; 0x24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <LL_GPIO_SetPinPull>:
{
 80038f8:	b480      	push	{r7}
 80038fa:	b089      	sub	sp, #36	; 0x24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	68da      	ldr	r2, [r3, #12]
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	fa93 f3a3 	rbit	r3, r3
 8003912:	613b      	str	r3, [r7, #16]
  return result;
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	fab3 f383 	clz	r3, r3
 800391a:	b2db      	uxtb	r3, r3
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	2103      	movs	r1, #3
 8003920:	fa01 f303 	lsl.w	r3, r1, r3
 8003924:	43db      	mvns	r3, r3
 8003926:	401a      	ands	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	fa93 f3a3 	rbit	r3, r3
 8003932:	61bb      	str	r3, [r7, #24]
  return result;
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	fab3 f383 	clz	r3, r3
 800393a:	b2db      	uxtb	r3, r3
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	fa01 f303 	lsl.w	r3, r1, r3
 8003944:	431a      	orrs	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	60da      	str	r2, [r3, #12]
}
 800394a:	bf00      	nop
 800394c:	3724      	adds	r7, #36	; 0x24
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <LL_GPIO_SetAFPin_0_7>:
{
 8003956:	b480      	push	{r7}
 8003958:	b089      	sub	sp, #36	; 0x24
 800395a:	af00      	add	r7, sp, #0
 800395c:	60f8      	str	r0, [r7, #12]
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a1a      	ldr	r2, [r3, #32]
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	fa93 f3a3 	rbit	r3, r3
 8003970:	613b      	str	r3, [r7, #16]
  return result;
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	fab3 f383 	clz	r3, r3
 8003978:	b2db      	uxtb	r3, r3
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	210f      	movs	r1, #15
 800397e:	fa01 f303 	lsl.w	r3, r1, r3
 8003982:	43db      	mvns	r3, r3
 8003984:	401a      	ands	r2, r3
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	fa93 f3a3 	rbit	r3, r3
 8003990:	61bb      	str	r3, [r7, #24]
  return result;
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	fab3 f383 	clz	r3, r3
 8003998:	b2db      	uxtb	r3, r3
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	6879      	ldr	r1, [r7, #4]
 800399e:	fa01 f303 	lsl.w	r3, r1, r3
 80039a2:	431a      	orrs	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	621a      	str	r2, [r3, #32]
}
 80039a8:	bf00      	nop
 80039aa:	3724      	adds	r7, #36	; 0x24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <LL_GPIO_SetAFPin_8_15>:
{
 80039b4:	b480      	push	{r7}
 80039b6:	b089      	sub	sp, #36	; 0x24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	0a1b      	lsrs	r3, r3, #8
 80039c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	fa93 f3a3 	rbit	r3, r3
 80039d0:	613b      	str	r3, [r7, #16]
  return result;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	fab3 f383 	clz	r3, r3
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	210f      	movs	r1, #15
 80039de:	fa01 f303 	lsl.w	r3, r1, r3
 80039e2:	43db      	mvns	r3, r3
 80039e4:	401a      	ands	r2, r3
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	0a1b      	lsrs	r3, r3, #8
 80039ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	fa93 f3a3 	rbit	r3, r3
 80039f2:	61bb      	str	r3, [r7, #24]
  return result;
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	fab3 f383 	clz	r3, r3
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	fa01 f303 	lsl.w	r3, r1, r3
 8003a04:	431a      	orrs	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003a0a:	bf00      	nop
 8003a0c:	3724      	adds	r7, #36	; 0x24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b088      	sub	sp, #32
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	fa93 f3a3 	rbit	r3, r3
 8003a34:	613b      	str	r3, [r7, #16]
  return result;
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	fab3 f383 	clz	r3, r3
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003a40:	e050      	b.n	8003ae4 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	2101      	movs	r1, #1
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4e:	4013      	ands	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d042      	beq.n	8003ade <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d003      	beq.n	8003a68 <LL_GPIO_Init+0x52>
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d10d      	bne.n	8003a84 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	69b9      	ldr	r1, [r7, #24]
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7ff ff12 	bl	800389a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	69b9      	ldr	r1, [r7, #24]
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7ff fef3 	bl	800386a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	461a      	mov	r2, r3
 8003a8a:	69b9      	ldr	r1, [r7, #24]
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7ff ff33 	bl	80038f8 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d11a      	bne.n	8003ad0 <LL_GPIO_Init+0xba>
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	fa93 f3a3 	rbit	r3, r3
 8003aa4:	60bb      	str	r3, [r7, #8]
  return result;
 8003aa6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003aa8:	fab3 f383 	clz	r3, r3
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b07      	cmp	r3, #7
 8003ab0:	d807      	bhi.n	8003ac2 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	69b9      	ldr	r1, [r7, #24]
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7ff ff4b 	bl	8003956 <LL_GPIO_SetAFPin_0_7>
 8003ac0:	e006      	b.n	8003ad0 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	69b9      	ldr	r1, [r7, #24]
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff ff72 	bl	80039b4 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	69b9      	ldr	r1, [r7, #24]
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7ff fe97 	bl	800380c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	fa22 f303 	lsr.w	r3, r2, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1a7      	bne.n	8003a42 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3720      	adds	r7, #32
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <LL_TIM_SetPrescaler>:
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <LL_TIM_SetAutoReload>:
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <LL_TIM_SetRepetitionCounter>:
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <LL_TIM_OC_SetCompareCH1>:
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <LL_TIM_OC_SetCompareCH2>:
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <LL_TIM_OC_SetCompareCH3>:
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <LL_TIM_OC_SetCompareCH4>:
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	f043 0201 	orr.w	r2, r3, #1
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	615a      	str	r2, [r3, #20]
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a31      	ldr	r2, [pc, #196]	; (8003cb8 <LL_TIM_Init+0xd8>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d00f      	beq.n	8003c18 <LL_TIM_Init+0x38>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bfe:	d00b      	beq.n	8003c18 <LL_TIM_Init+0x38>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a2e      	ldr	r2, [pc, #184]	; (8003cbc <LL_TIM_Init+0xdc>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d007      	beq.n	8003c18 <LL_TIM_Init+0x38>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a2d      	ldr	r2, [pc, #180]	; (8003cc0 <LL_TIM_Init+0xe0>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d003      	beq.n	8003c18 <LL_TIM_Init+0x38>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a2c      	ldr	r2, [pc, #176]	; (8003cc4 <LL_TIM_Init+0xe4>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d106      	bne.n	8003c26 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a23      	ldr	r2, [pc, #140]	; (8003cb8 <LL_TIM_Init+0xd8>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d01b      	beq.n	8003c66 <LL_TIM_Init+0x86>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c34:	d017      	beq.n	8003c66 <LL_TIM_Init+0x86>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a20      	ldr	r2, [pc, #128]	; (8003cbc <LL_TIM_Init+0xdc>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d013      	beq.n	8003c66 <LL_TIM_Init+0x86>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a1f      	ldr	r2, [pc, #124]	; (8003cc0 <LL_TIM_Init+0xe0>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d00f      	beq.n	8003c66 <LL_TIM_Init+0x86>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a1e      	ldr	r2, [pc, #120]	; (8003cc4 <LL_TIM_Init+0xe4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d00b      	beq.n	8003c66 <LL_TIM_Init+0x86>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a1d      	ldr	r2, [pc, #116]	; (8003cc8 <LL_TIM_Init+0xe8>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d007      	beq.n	8003c66 <LL_TIM_Init+0x86>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a1c      	ldr	r2, [pc, #112]	; (8003ccc <LL_TIM_Init+0xec>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d003      	beq.n	8003c66 <LL_TIM_Init+0x86>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a1b      	ldr	r2, [pc, #108]	; (8003cd0 <LL_TIM_Init+0xf0>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d106      	bne.n	8003c74 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	4619      	mov	r1, r3
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff ff49 	bl	8003b18 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7ff ff35 	bl	8003afc <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a08      	ldr	r2, [pc, #32]	; (8003cb8 <LL_TIM_Init+0xd8>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d105      	bne.n	8003ca6 <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7ff ff47 	bl	8003b34 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7ff ff8a 	bl	8003bc0 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40010000 	.word	0x40010000
 8003cbc:	40000400 	.word	0x40000400
 8003cc0:	40000800 	.word	0x40000800
 8003cc4:	40000c00 	.word	0x40000c00
 8003cc8:	40014000 	.word	0x40014000
 8003ccc:	40014400 	.word	0x40014400
 8003cd0:	40014800 	.word	0x40014800

08003cd4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cea:	d027      	beq.n	8003d3c <LL_TIM_OC_Init+0x68>
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf2:	d82a      	bhi.n	8003d4a <LL_TIM_OC_Init+0x76>
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cfa:	d018      	beq.n	8003d2e <LL_TIM_OC_Init+0x5a>
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d02:	d822      	bhi.n	8003d4a <LL_TIM_OC_Init+0x76>
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d003      	beq.n	8003d12 <LL_TIM_OC_Init+0x3e>
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	2b10      	cmp	r3, #16
 8003d0e:	d007      	beq.n	8003d20 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8003d10:	e01b      	b.n	8003d4a <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 f81f 	bl	8003d58 <OC1Config>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	75fb      	strb	r3, [r7, #23]
      break;
 8003d1e:	e015      	b.n	8003d4c <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003d20:	6879      	ldr	r1, [r7, #4]
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f000 f87e 	bl	8003e24 <OC2Config>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d2c:	e00e      	b.n	8003d4c <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003d2e:	6879      	ldr	r1, [r7, #4]
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 f8e1 	bl	8003ef8 <OC3Config>
 8003d36:	4603      	mov	r3, r0
 8003d38:	75fb      	strb	r3, [r7, #23]
      break;
 8003d3a:	e007      	b.n	8003d4c <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 f944 	bl	8003fcc <OC4Config>
 8003d44:	4603      	mov	r3, r0
 8003d46:	75fb      	strb	r3, [r7, #23]
      break;
 8003d48:	e000      	b.n	8003d4c <LL_TIM_OC_Init+0x78>
      break;
 8003d4a:	bf00      	nop
  }

  return result;
 8003d4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	f023 0201 	bic.w	r2, r3, #1
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f023 0303 	bic.w	r3, r3, #3
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f023 0202 	bic.w	r2, r3, #2
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f023 0201 	bic.w	r2, r3, #1
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a1a      	ldr	r2, [pc, #104]	; (8003e20 <OC1Config+0xc8>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d11e      	bne.n	8003df8 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f023 0208 	bic.w	r2, r3, #8
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f023 0204 	bic.w	r2, r3, #4
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	4313      	orrs	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	4619      	mov	r1, r3
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7ff fea0 	bl	8003b50 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40010000 	.word	0x40010000

08003e24 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	f023 0210 	bic.w	r2, r3, #16
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	021b      	lsls	r3, r3, #8
 8003e60:	4313      	orrs	r3, r2
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f023 0220 	bic.w	r2, r3, #32
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	011b      	lsls	r3, r3, #4
 8003e70:	4313      	orrs	r3, r2
 8003e72:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f023 0210 	bic.w	r2, r3, #16
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	4313      	orrs	r3, r2
 8003e82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a1b      	ldr	r2, [pc, #108]	; (8003ef4 <OC2Config+0xd0>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d11f      	bne.n	8003ecc <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	019b      	lsls	r3, r3, #6
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	019b      	lsls	r3, r3, #6
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	4619      	mov	r1, r3
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7ff fe44 	bl	8003b6c <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3718      	adds	r7, #24
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40010000 	.word	0x40010000

08003ef8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f023 0303 	bic.w	r3, r3, #3
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	021b      	lsls	r3, r3, #8
 8003f42:	4313      	orrs	r3, r2
 8003f44:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	021b      	lsls	r3, r3, #8
 8003f52:	4313      	orrs	r3, r2
 8003f54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a1b      	ldr	r2, [pc, #108]	; (8003fc8 <OC3Config+0xd0>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d11f      	bne.n	8003f9e <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	029b      	lsls	r3, r3, #10
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	029b      	lsls	r3, r3, #10
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	015b      	lsls	r3, r3, #5
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	4619      	mov	r1, r3
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7ff fde9 	bl	8003b88 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40010000 	.word	0x40010000

08003fcc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	021b      	lsls	r3, r3, #8
 8004008:	4313      	orrs	r3, r2
 800400a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	031b      	lsls	r3, r3, #12
 8004018:	4313      	orrs	r3, r2
 800401a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	031b      	lsls	r3, r3, #12
 8004028:	4313      	orrs	r3, r2
 800402a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a0f      	ldr	r2, [pc, #60]	; (800406c <OC4Config+0xa0>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d107      	bne.n	8004044 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	019b      	lsls	r3, r3, #6
 8004040:	4313      	orrs	r3, r2
 8004042:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	4619      	mov	r1, r3
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7ff fda4 	bl	8003ba4 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40010000 	.word	0x40010000

08004070 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004078:	4a04      	ldr	r2, [pc, #16]	; (800408c <LL_SetSystemCoreClock+0x1c>)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6013      	str	r3, [r2, #0]
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	2000001c 	.word	0x2000001c

08004090 <memset>:
 8004090:	4402      	add	r2, r0
 8004092:	4603      	mov	r3, r0
 8004094:	4293      	cmp	r3, r2
 8004096:	d100      	bne.n	800409a <memset+0xa>
 8004098:	4770      	bx	lr
 800409a:	f803 1b01 	strb.w	r1, [r3], #1
 800409e:	e7f9      	b.n	8004094 <memset+0x4>

080040a0 <__libc_init_array>:
 80040a0:	b570      	push	{r4, r5, r6, lr}
 80040a2:	4d0d      	ldr	r5, [pc, #52]	; (80040d8 <__libc_init_array+0x38>)
 80040a4:	4c0d      	ldr	r4, [pc, #52]	; (80040dc <__libc_init_array+0x3c>)
 80040a6:	1b64      	subs	r4, r4, r5
 80040a8:	10a4      	asrs	r4, r4, #2
 80040aa:	2600      	movs	r6, #0
 80040ac:	42a6      	cmp	r6, r4
 80040ae:	d109      	bne.n	80040c4 <__libc_init_array+0x24>
 80040b0:	4d0b      	ldr	r5, [pc, #44]	; (80040e0 <__libc_init_array+0x40>)
 80040b2:	4c0c      	ldr	r4, [pc, #48]	; (80040e4 <__libc_init_array+0x44>)
 80040b4:	f000 f818 	bl	80040e8 <_init>
 80040b8:	1b64      	subs	r4, r4, r5
 80040ba:	10a4      	asrs	r4, r4, #2
 80040bc:	2600      	movs	r6, #0
 80040be:	42a6      	cmp	r6, r4
 80040c0:	d105      	bne.n	80040ce <__libc_init_array+0x2e>
 80040c2:	bd70      	pop	{r4, r5, r6, pc}
 80040c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80040c8:	4798      	blx	r3
 80040ca:	3601      	adds	r6, #1
 80040cc:	e7ee      	b.n	80040ac <__libc_init_array+0xc>
 80040ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d2:	4798      	blx	r3
 80040d4:	3601      	adds	r6, #1
 80040d6:	e7f2      	b.n	80040be <__libc_init_array+0x1e>
 80040d8:	08004194 	.word	0x08004194
 80040dc:	08004194 	.word	0x08004194
 80040e0:	08004194 	.word	0x08004194
 80040e4:	08004198 	.word	0x08004198

080040e8 <_init>:
 80040e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ea:	bf00      	nop
 80040ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ee:	bc08      	pop	{r3}
 80040f0:	469e      	mov	lr, r3
 80040f2:	4770      	bx	lr

080040f4 <_fini>:
 80040f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040f6:	bf00      	nop
 80040f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040fa:	bc08      	pop	{r3}
 80040fc:	469e      	mov	lr, r3
 80040fe:	4770      	bx	lr
